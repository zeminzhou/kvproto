// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `deadlock.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct WaitForEntriesRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WaitForEntriesRequest {
    fn default() -> &'a WaitForEntriesRequest {
        <WaitForEntriesRequest as ::protobuf::Message>::default_instance()
    }
}

impl WaitForEntriesRequest {
    pub fn new() -> WaitForEntriesRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WaitForEntriesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WaitForEntriesRequest {
        WaitForEntriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<WaitForEntriesRequest>(
                    "WaitForEntriesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WaitForEntriesRequest {
        static mut instance: ::protobuf::lazy::Lazy<WaitForEntriesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WaitForEntriesRequest,
        };
        unsafe {
            instance.get(WaitForEntriesRequest::new)
        }
    }
}

impl ::protobuf::Clear for WaitForEntriesRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for WaitForEntriesRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for WaitForEntriesRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForEntriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WaitForEntriesResponse {
    // message fields
    pub entries: ::protobuf::RepeatedField<WaitForEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WaitForEntriesResponse {
    fn default() -> &'a WaitForEntriesResponse {
        <WaitForEntriesResponse as ::protobuf::Message>::default_instance()
    }
}

impl WaitForEntriesResponse {
    pub fn new() -> WaitForEntriesResponse {
        ::std::default::Default::default()
    }

    // repeated .deadlock.WaitForEntry entries = 1;


    pub fn get_entries(&self) -> &[WaitForEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<WaitForEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<WaitForEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<WaitForEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WaitForEntriesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WaitForEntriesResponse {
        WaitForEntriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WaitForEntry>>(
                    "entries",
                    |m: &WaitForEntriesResponse| { &m.entries },
                    |m: &mut WaitForEntriesResponse| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WaitForEntriesResponse>(
                    "WaitForEntriesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WaitForEntriesResponse {
        static mut instance: ::protobuf::lazy::Lazy<WaitForEntriesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WaitForEntriesResponse,
        };
        unsafe {
            instance.get(WaitForEntriesResponse::new)
        }
    }
}

impl ::protobuf::Clear for WaitForEntriesResponse {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for WaitForEntriesResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.entries, "entries", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for WaitForEntriesResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.entries, "entries", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForEntriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WaitForEntry {
    // message fields
    pub txn: u64,
    pub wait_for_txn: u64,
    pub key_hash: u64,
    pub key: ::std::vec::Vec<u8>,
    pub resource_group_tag: ::std::vec::Vec<u8>,
    pub wait_time: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WaitForEntry {
    fn default() -> &'a WaitForEntry {
        <WaitForEntry as ::protobuf::Message>::default_instance()
    }
}

impl WaitForEntry {
    pub fn new() -> WaitForEntry {
        ::std::default::Default::default()
    }

    // uint64 txn = 1;


    pub fn get_txn(&self) -> u64 {
        self.txn
    }
    pub fn clear_txn(&mut self) {
        self.txn = 0;
    }

    // Param is passed by value, moved
    pub fn set_txn(&mut self, v: u64) {
        self.txn = v;
    }

    // uint64 wait_for_txn = 2;


    pub fn get_wait_for_txn(&self) -> u64 {
        self.wait_for_txn
    }
    pub fn clear_wait_for_txn(&mut self) {
        self.wait_for_txn = 0;
    }

    // Param is passed by value, moved
    pub fn set_wait_for_txn(&mut self, v: u64) {
        self.wait_for_txn = v;
    }

    // uint64 key_hash = 3;


    pub fn get_key_hash(&self) -> u64 {
        self.key_hash
    }
    pub fn clear_key_hash(&mut self) {
        self.key_hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_key_hash(&mut self, v: u64) {
        self.key_hash = v;
    }

    // bytes key = 4;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // bytes resource_group_tag = 5;


    pub fn get_resource_group_tag(&self) -> &[u8] {
        &self.resource_group_tag
    }
    pub fn clear_resource_group_tag(&mut self) {
        self.resource_group_tag.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_group_tag(&mut self, v: ::std::vec::Vec<u8>) {
        self.resource_group_tag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_group_tag(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.resource_group_tag
    }

    // Take field
    pub fn take_resource_group_tag(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.resource_group_tag, ::std::vec::Vec::new())
    }

    // uint64 wait_time = 6;


    pub fn get_wait_time(&self) -> u64 {
        self.wait_time
    }
    pub fn clear_wait_time(&mut self) {
        self.wait_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_wait_time(&mut self, v: u64) {
        self.wait_time = v;
    }
}

impl ::protobuf::Message for WaitForEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.txn = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.wait_for_txn = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.key_hash = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.resource_group_tag)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.wait_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.txn != 0 {
            my_size += ::protobuf::rt::value_size(1, self.txn, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.wait_for_txn != 0 {
            my_size += ::protobuf::rt::value_size(2, self.wait_for_txn, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.key_hash != 0 {
            my_size += ::protobuf::rt::value_size(3, self.key_hash, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.key);
        }
        if !self.resource_group_tag.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.resource_group_tag);
        }
        if self.wait_time != 0 {
            my_size += ::protobuf::rt::value_size(6, self.wait_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.txn != 0 {
            os.write_uint64(1, self.txn)?;
        }
        if self.wait_for_txn != 0 {
            os.write_uint64(2, self.wait_for_txn)?;
        }
        if self.key_hash != 0 {
            os.write_uint64(3, self.key_hash)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(4, &self.key)?;
        }
        if !self.resource_group_tag.is_empty() {
            os.write_bytes(5, &self.resource_group_tag)?;
        }
        if self.wait_time != 0 {
            os.write_uint64(6, self.wait_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WaitForEntry {
        WaitForEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "txn",
                    |m: &WaitForEntry| { &m.txn },
                    |m: &mut WaitForEntry| { &mut m.txn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "wait_for_txn",
                    |m: &WaitForEntry| { &m.wait_for_txn },
                    |m: &mut WaitForEntry| { &mut m.wait_for_txn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "key_hash",
                    |m: &WaitForEntry| { &m.key_hash },
                    |m: &mut WaitForEntry| { &mut m.key_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key",
                    |m: &WaitForEntry| { &m.key },
                    |m: &mut WaitForEntry| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "resource_group_tag",
                    |m: &WaitForEntry| { &m.resource_group_tag },
                    |m: &mut WaitForEntry| { &mut m.resource_group_tag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "wait_time",
                    |m: &WaitForEntry| { &m.wait_time },
                    |m: &mut WaitForEntry| { &mut m.wait_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WaitForEntry>(
                    "WaitForEntry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WaitForEntry {
        static mut instance: ::protobuf::lazy::Lazy<WaitForEntry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WaitForEntry,
        };
        unsafe {
            instance.get(WaitForEntry::new)
        }
    }
}

impl ::protobuf::Clear for WaitForEntry {
    fn clear(&mut self) {
        self.txn = 0;
        self.wait_for_txn = 0;
        self.key_hash = 0;
        self.key.clear();
        self.resource_group_tag.clear();
        self.wait_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for WaitForEntry {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.txn, "txn", buf);
        ::protobuf::PbPrint::fmt(&self.wait_for_txn, "wait_for_txn", buf);
        ::protobuf::PbPrint::fmt(&self.key_hash, "key_hash", buf);
        ::protobuf::PbPrint::fmt(&self.key, "key", buf);
        ::protobuf::PbPrint::fmt(&self.resource_group_tag, "resource_group_tag", buf);
        ::protobuf::PbPrint::fmt(&self.wait_time, "wait_time", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for WaitForEntry {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.txn, "txn", &mut s);
        ::protobuf::PbPrint::fmt(&self.wait_for_txn, "wait_for_txn", &mut s);
        ::protobuf::PbPrint::fmt(&self.key_hash, "key_hash", &mut s);
        ::protobuf::PbPrint::fmt(&self.key, "key", &mut s);
        ::protobuf::PbPrint::fmt(&self.resource_group_tag, "resource_group_tag", &mut s);
        ::protobuf::PbPrint::fmt(&self.wait_time, "wait_time", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeadlockRequest {
    // message fields
    pub tp: DeadlockRequestType,
    pub entry: ::protobuf::SingularPtrField<WaitForEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeadlockRequest {
    fn default() -> &'a DeadlockRequest {
        <DeadlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeadlockRequest {
    pub fn new() -> DeadlockRequest {
        ::std::default::Default::default()
    }

    // .deadlock.DeadlockRequestType tp = 1;


    pub fn get_tp(&self) -> DeadlockRequestType {
        self.tp
    }
    pub fn clear_tp(&mut self) {
        self.tp = DeadlockRequestType::Detect;
    }

    // Param is passed by value, moved
    pub fn set_tp(&mut self, v: DeadlockRequestType) {
        self.tp = v;
    }

    // .deadlock.WaitForEntry entry = 2;


    pub fn get_entry(&self) -> &WaitForEntry {
        self.entry.as_ref().unwrap_or_else(|| WaitForEntry::default_instance())
    }
    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    pub fn has_entry(&self) -> bool {
        self.entry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: WaitForEntry) {
        self.entry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry(&mut self) -> &mut WaitForEntry {
        if self.entry.is_none() {
            self.entry.set_default();
        }
        self.entry.as_mut().unwrap()
    }

    // Take field
    pub fn take_entry(&mut self) -> WaitForEntry {
        self.entry.take().unwrap_or_else(|| WaitForEntry::new())
    }
}

impl ::protobuf::Message for DeadlockRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.tp = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tp != DeadlockRequestType::Detect {
            my_size += ::protobuf::rt::enum_size(1, self.tp);
        }
        if let Some(ref v) = self.entry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.tp != DeadlockRequestType::Detect {
            os.write_enum(1, self.tp.value())?;
        }
        if let Some(ref v) = self.entry.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeadlockRequest {
        DeadlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DeadlockRequestType>>(
                    "tp",
                    |m: &DeadlockRequest| { &m.tp },
                    |m: &mut DeadlockRequest| { &mut m.tp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WaitForEntry>>(
                    "entry",
                    |m: &DeadlockRequest| { &m.entry },
                    |m: &mut DeadlockRequest| { &mut m.entry },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeadlockRequest>(
                    "DeadlockRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeadlockRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeadlockRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeadlockRequest,
        };
        unsafe {
            instance.get(DeadlockRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeadlockRequest {
    fn clear(&mut self) {
        self.tp = DeadlockRequestType::Detect;
        self.entry.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DeadlockRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.tp, "tp", buf);
        ::protobuf::PbPrint::fmt(&self.entry, "entry", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DeadlockRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.tp, "tp", &mut s);
        ::protobuf::PbPrint::fmt(&self.entry, "entry", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeadlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeadlockResponse {
    // message fields
    pub entry: ::protobuf::SingularPtrField<WaitForEntry>,
    pub deadlock_key_hash: u64,
    pub wait_chain: ::protobuf::RepeatedField<WaitForEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeadlockResponse {
    fn default() -> &'a DeadlockResponse {
        <DeadlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeadlockResponse {
    pub fn new() -> DeadlockResponse {
        ::std::default::Default::default()
    }

    // .deadlock.WaitForEntry entry = 1;


    pub fn get_entry(&self) -> &WaitForEntry {
        self.entry.as_ref().unwrap_or_else(|| WaitForEntry::default_instance())
    }
    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    pub fn has_entry(&self) -> bool {
        self.entry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: WaitForEntry) {
        self.entry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry(&mut self) -> &mut WaitForEntry {
        if self.entry.is_none() {
            self.entry.set_default();
        }
        self.entry.as_mut().unwrap()
    }

    // Take field
    pub fn take_entry(&mut self) -> WaitForEntry {
        self.entry.take().unwrap_or_else(|| WaitForEntry::new())
    }

    // uint64 deadlock_key_hash = 2;


    pub fn get_deadlock_key_hash(&self) -> u64 {
        self.deadlock_key_hash
    }
    pub fn clear_deadlock_key_hash(&mut self) {
        self.deadlock_key_hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_deadlock_key_hash(&mut self, v: u64) {
        self.deadlock_key_hash = v;
    }

    // repeated .deadlock.WaitForEntry wait_chain = 3;


    pub fn get_wait_chain(&self) -> &[WaitForEntry] {
        &self.wait_chain
    }
    pub fn clear_wait_chain(&mut self) {
        self.wait_chain.clear();
    }

    // Param is passed by value, moved
    pub fn set_wait_chain(&mut self, v: ::protobuf::RepeatedField<WaitForEntry>) {
        self.wait_chain = v;
    }

    // Mutable pointer to the field.
    pub fn mut_wait_chain(&mut self) -> &mut ::protobuf::RepeatedField<WaitForEntry> {
        &mut self.wait_chain
    }

    // Take field
    pub fn take_wait_chain(&mut self) -> ::protobuf::RepeatedField<WaitForEntry> {
        ::std::mem::replace(&mut self.wait_chain, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DeadlockResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.wait_chain {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entry)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.deadlock_key_hash = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.wait_chain)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.entry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.deadlock_key_hash != 0 {
            my_size += ::protobuf::rt::value_size(2, self.deadlock_key_hash, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.wait_chain {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.entry.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.deadlock_key_hash != 0 {
            os.write_uint64(2, self.deadlock_key_hash)?;
        }
        for v in &self.wait_chain {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeadlockResponse {
        DeadlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WaitForEntry>>(
                    "entry",
                    |m: &DeadlockResponse| { &m.entry },
                    |m: &mut DeadlockResponse| { &mut m.entry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "deadlock_key_hash",
                    |m: &DeadlockResponse| { &m.deadlock_key_hash },
                    |m: &mut DeadlockResponse| { &mut m.deadlock_key_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WaitForEntry>>(
                    "wait_chain",
                    |m: &DeadlockResponse| { &m.wait_chain },
                    |m: &mut DeadlockResponse| { &mut m.wait_chain },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeadlockResponse>(
                    "DeadlockResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeadlockResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeadlockResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeadlockResponse,
        };
        unsafe {
            instance.get(DeadlockResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeadlockResponse {
    fn clear(&mut self) {
        self.entry.clear();
        self.deadlock_key_hash = 0;
        self.wait_chain.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DeadlockResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.entry, "entry", buf);
        ::protobuf::PbPrint::fmt(&self.deadlock_key_hash, "deadlock_key_hash", buf);
        ::protobuf::PbPrint::fmt(&self.wait_chain, "wait_chain", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DeadlockResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.entry, "entry", &mut s);
        ::protobuf::PbPrint::fmt(&self.deadlock_key_hash, "deadlock_key_hash", &mut s);
        ::protobuf::PbPrint::fmt(&self.wait_chain, "wait_chain", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeadlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DeadlockRequestType {
    Detect = 0,
    CleanUpWaitFor = 1,
    CleanUp = 2,
}

impl ::protobuf::ProtobufEnum for DeadlockRequestType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DeadlockRequestType> {
        match value {
            0 => ::std::option::Option::Some(DeadlockRequestType::Detect),
            1 => ::std::option::Option::Some(DeadlockRequestType::CleanUpWaitFor),
            2 => ::std::option::Option::Some(DeadlockRequestType::CleanUp),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DeadlockRequestType] = &[
            DeadlockRequestType::Detect,
            DeadlockRequestType::CleanUpWaitFor,
            DeadlockRequestType::CleanUp,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("DeadlockRequestType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for DeadlockRequestType {
}

impl ::protobuf::PbPrint for DeadlockRequestType {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == DeadlockRequestType::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for DeadlockRequestType {
    fn default() -> Self {
        DeadlockRequestType::Detect
    }
}

impl ::protobuf::reflect::ProtobufValue for DeadlockRequestType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0edeadlock.proto\x12\x08deadlock\x1a\x14gogoproto/gogo.proto\"\x17\n\
    \x15WaitForEntriesRequest\"P\n\x16WaitForEntriesResponse\x126\n\x07entri\
    es\x18\x01\x20\x03(\x0b2\x16.deadlock.WaitForEntryR\x07entriesB\x04\xc8\
    \xde\x1f\0\"\xba\x01\n\x0cWaitForEntry\x12\x10\n\x03txn\x18\x01\x20\x01(\
    \x04R\x03txn\x12\x20\n\x0cwait_for_txn\x18\x02\x20\x01(\x04R\nwaitForTxn\
    \x12\x19\n\x08key_hash\x18\x03\x20\x01(\x04R\x07keyHash\x12\x10\n\x03key\
    \x18\x04\x20\x01(\x0cR\x03key\x12,\n\x12resource_group_tag\x18\x05\x20\
    \x01(\x0cR\x10resourceGroupTag\x12\x1b\n\twait_time\x18\x06\x20\x01(\x04\
    R\x08waitTime\"t\n\x0fDeadlockRequest\x12-\n\x02tp\x18\x01\x20\x01(\x0e2\
    \x1d.deadlock.DeadlockRequestTypeR\x02tp\x122\n\x05entry\x18\x02\x20\x01\
    (\x0b2\x16.deadlock.WaitForEntryR\x05entryB\x04\xc8\xde\x1f\0\"\xa9\x01\
    \n\x10DeadlockResponse\x122\n\x05entry\x18\x01\x20\x01(\x0b2\x16.deadloc\
    k.WaitForEntryR\x05entryB\x04\xc8\xde\x1f\0\x12*\n\x11deadlock_key_hash\
    \x18\x02\x20\x01(\x04R\x0fdeadlockKeyHash\x125\n\nwait_chain\x18\x03\x20\
    \x03(\x0b2\x16.deadlock.WaitForEntryR\twaitChain*B\n\x13DeadlockRequestT\
    ype\x12\n\n\x06Detect\x10\0\x12\x12\n\x0eCleanUpWaitFor\x10\x01\x12\x0b\
    \n\x07CleanUp\x10\x022\xab\x01\n\x08Deadlock\x12X\n\x11GetWaitForEntries\
    \x12\x1f.deadlock.WaitForEntriesRequest\x1a\x20.deadlock.WaitForEntriesR\
    esponse\"\0\x12E\n\x06Detect\x12\x19.deadlock.DeadlockRequest\x1a\x1a.de\
    adlock.DeadlockResponse\"\0(\x010\x01J\xc8\x11\n\x06\x12\x04\0\0;\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x11\n\t\n\
    \x02\x03\0\x12\x03\x03\0\x1e\n\n\n\x02\x04\0\x12\x04\x05\0\x06\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x05\x08\x1d\n\n\n\x02\x04\x01\x12\x04\x08\0\n\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x08\x08\x1e\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\t\x08I\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\t\x08\x10\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03\t\x11\x1d\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\t\x1e%\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t()\n\x0c\n\x05\x04\
    \x01\x02\0\x08\x12\x03\t*H\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\
    \x03\t+G\n\n\n\x02\x04\x02\x12\x04\x0c\0\x19\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x0c\x08\x14\n2\n\x04\x04\x02\x02\0\x12\x03\x0e\x08\x17\x1a%\x20\
    The\x20transaction\x20id\x20that\x20is\x20waiting.\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x0e\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0e\
    \x0f\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0e\x15\x16\n;\n\x04\x04\
    \x02\x02\x01\x12\x03\x10\x08\x20\x1a.\x20The\x20transaction\x20id\x20tha\
    t\x20is\x20being\x20waited\x20for.\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x10\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x10\x0f\x1b\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x10\x1e\x1f\n=\n\x04\x04\x02\x02\
    \x02\x12\x03\x12\x08\x1c\x1a0\x20The\x20hash\x20value\x20of\x20the\x20ke\
    y\x20is\x20being\x20waited\x20for.\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03\x12\x08\x0e\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x12\x0f\x17\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x12\x1a\x1b\n9\n\x04\x04\x02\x02\
    \x03\x12\x03\x14\x08\x16\x1a,\x20The\x20key\x20the\x20current\x20txn\x20\
    is\x20trying\x20to\x20lock.\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\
    \x14\x08\r\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x14\x0e\x11\n\x0c\n\
    \x05\x04\x02\x02\x03\x03\x12\x03\x14\x14\x15\n<\n\x04\x04\x02\x02\x04\
    \x12\x03\x16\x08%\x1a/\x20The\x20tag\x20came\x20from\x20the\x20lock\x20r\
    equest's\x20context.\n\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x16\x08\r\
    \n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x16\x0e\x20\n\x0c\n\x05\x04\x02\
    \x02\x04\x03\x12\x03\x16#$\n.\n\x04\x04\x02\x02\x05\x12\x03\x18\x08\x1d\
    \x1a!\x20Milliseconds\x20it\x20has\x20been\x20waits.\n\n\x0c\n\x05\x04\
    \x02\x02\x05\x05\x12\x03\x18\x08\x0e\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\
    \x03\x18\x0f\x18\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03\x18\x1b\x1c\n\n\
    \n\x02\x05\0\x12\x04\x1b\0!\x01\n\n\n\x03\x05\0\x01\x12\x03\x1b\x05\x18\
    \n\x0b\n\x04\x05\0\x02\0\x12\x03\x1c\x08\x13\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x1c\x08\x0e\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x1c\x11\x12\nO\
    \n\x04\x05\0\x02\x01\x12\x03\x1e\x08\x1b\x1aB\x20CleanUpWaitFor\x20clean\
    s\x20a\x20single\x20entry\x20the\x20transaction\x20is\x20waiting.\n\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x1e\x08\x16\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03\x1e\x19\x1a\nE\n\x04\x05\0\x02\x02\x12\x03\x20\x08\x14\
    \x1a8\x20CleanUp\x20cleans\x20all\x20entries\x20the\x20transaction\x20is\
    \x20waiting.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x20\x08\x0f\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x03\x20\x12\x13\n\n\n\x02\x04\x03\x12\x04#\0&\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03#\x08\x17\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03$\x08#\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03$\x08\x1b\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03$\x1c\x1e\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03$!\"\n\x0b\n\x04\x04\x03\x02\x01\x12\x03%\x08>\n\x0c\n\x05\x04\
    \x03\x02\x01\x06\x12\x03%\x08\x14\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03%\x15\x1a\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03%\x1d\x1e\n\x0c\n\
    \x05\x04\x03\x02\x01\x08\x12\x03%\x1f=\n\x0f\n\x08\x04\x03\x02\x01\x08\
    \xe9\xfb\x03\x12\x03%\x20<\n\n\n\x02\x04\x04\x12\x04(\00\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03(\x08\x18\nM\n\x04\x04\x04\x02\0\x12\x03*\x08>\x1a@\
    \x20The\x20same\x20entry\x20sent\x20by\x20DeadlockRequest,\x20identifies\
    \x20the\x20sender.\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03*\x08\x14\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03*\x15\x1a\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03*\x1d\x1e\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03*\x1f=\n\x0f\
    \n\x08\x04\x04\x02\0\x08\xe9\xfb\x03\x12\x03*\x20<\nP\n\x04\x04\x04\x02\
    \x01\x12\x03,\x08%\x1aC\x20The\x20key\x20hash\x20of\x20the\x20lock\x20th\
    at\x20is\x20hold\x20by\x20the\x20waiting\x20transaction.\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x05\x12\x03,\x08\x0e\n\x0c\n\x05\x04\x04\x02\x01\x01\
    \x12\x03,\x0f\x20\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03,#$\n\x81\x01\n\
    \x04\x04\x04\x02\x02\x12\x03/\x08-\x1at\x20The\x20other\x20entries\x20of\
    \x20the\x20dead\x20lock\x20circle.\x20The\x20current\x20entry\x20is\x20i\
    n\x20`entry`\x20field\x20and\x20\x20not\n\x20included\x20in\x20this\x20f\
    ield.\n\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03/\x08\x10\n\x0c\n\x05\x04\
    \x04\x02\x02\x06\x12\x03/\x11\x1d\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\
    \x03/\x1e(\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03/+,\n\n\n\x02\x06\0\
    \x12\x042\0;\x01\n\n\n\x03\x06\0\x01\x12\x032\x08\x10\n\xa4\x01\n\x04\
    \x06\0\x02\0\x12\x035\x08X\x1a\x96\x01\x20Get\x20local\x20wait\x20for\
    \x20entries,\x20should\x20be\x20handle\x20by\x20every\x20node.\n\x20The\
    \x20owner\x20should\x20sent\x20this\x20request\x20to\x20all\x20members\
    \x20to\x20build\x20the\x20complete\x20wait\x20for\x20graph.\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x035\x0c\x1d\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x035\x1e3\n\x0c\n\x05\x06\0\x02\0\x03\x12\x035>T\n\xd0\x01\n\x04\x06\0\
    \x02\x01\x12\x03:\x08O\x1a\xc2\x01\x20Detect\x20should\x20only\x20sent\
    \x20to\x20the\x20owner.\x20only\x20be\x20handled\x20by\x20the\x20owner.\
    \n\x20The\x20DeadlockResponse\x20is\x20sent\x20back\x20only\x20if\x20the\
    re\x20is\x20deadlock\x20detected.\n\x20CleanUpWaitFor\x20and\x20CleanUp\
    \x20doesn't\x20return\x20responses.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03:\x0c\x12\n\x0c\n\x05\x06\0\x02\x01\x05\x12\x03:\x13\x19\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03:\x1a)\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03:4\
    :\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03:;Kb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
pub use super::deadlock_grpc::*;
