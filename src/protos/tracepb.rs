// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tracepb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct TraceRecordRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceRecordRequest {
    fn default() -> &'a TraceRecordRequest {
        <TraceRecordRequest as ::protobuf::Message>::default_instance()
    }
}

impl TraceRecordRequest {
    pub fn new() -> TraceRecordRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TraceRecordRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceRecordRequest {
        TraceRecordRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TraceRecordRequest>(
                    "TraceRecordRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TraceRecordRequest {
        static mut instance: ::protobuf::lazy::Lazy<TraceRecordRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TraceRecordRequest,
        };
        unsafe {
            instance.get(TraceRecordRequest::new)
        }
    }
}

impl ::protobuf::Clear for TraceRecordRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TraceRecordRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for TraceRecordRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceRecordRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TraceRecord {
    // message oneof groups
    pub record_oneof: ::std::option::Option<TraceRecord_oneof_record_oneof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceRecord {
    fn default() -> &'a TraceRecord {
        <TraceRecord as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq)]
pub enum TraceRecord_oneof_record_oneof {
    Report(Report),
    NotifyCollect(NotifyCollect),
}

impl ::protobuf::PbPrint for TraceRecord_oneof_record_oneof {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            TraceRecord_oneof_record_oneof::Report(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            TraceRecord_oneof_record_oneof::NotifyCollect(v) => ::protobuf::PbPrint::fmt(v, name, buf),
        }
    }
}

impl TraceRecord {
    pub fn new() -> TraceRecord {
        ::std::default::Default::default()
    }

    // .tracepb.Report report = 1;


    pub fn get_report(&self) -> &Report {
        match self.record_oneof {
            ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(ref v)) => v,
            _ => Report::default_instance(),
        }
    }
    pub fn clear_report(&mut self) {
        self.record_oneof = ::std::option::Option::None;
    }

    pub fn has_report(&self) -> bool {
        match self.record_oneof {
            ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_report(&mut self, v: Report) {
        self.record_oneof = ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(v))
    }

    // Mutable pointer to the field.
    pub fn mut_report(&mut self) -> &mut Report {
        if let ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(_)) = self.record_oneof {
        } else {
            self.record_oneof = ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(Report::new()));
        }
        match self.record_oneof {
            ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_report(&mut self) -> Report {
        if self.has_report() {
            match self.record_oneof.take() {
                ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(v)) => v,
                _ => panic!(),
            }
        } else {
            Report::new()
        }
    }

    // .tracepb.NotifyCollect notify_collect = 2;


    pub fn get_notify_collect(&self) -> &NotifyCollect {
        match self.record_oneof {
            ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(ref v)) => v,
            _ => NotifyCollect::default_instance(),
        }
    }
    pub fn clear_notify_collect(&mut self) {
        self.record_oneof = ::std::option::Option::None;
    }

    pub fn has_notify_collect(&self) -> bool {
        match self.record_oneof {
            ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_notify_collect(&mut self, v: NotifyCollect) {
        self.record_oneof = ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_notify_collect(&mut self) -> &mut NotifyCollect {
        if let ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(_)) = self.record_oneof {
        } else {
            self.record_oneof = ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(NotifyCollect::new()));
        }
        match self.record_oneof {
            ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_notify_collect(&mut self) -> NotifyCollect {
        if self.has_notify_collect() {
            match self.record_oneof.take() {
                ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(v)) => v,
                _ => panic!(),
            }
        } else {
            NotifyCollect::new()
        }
    }
}

impl ::protobuf::Message for TraceRecord {
    fn is_initialized(&self) -> bool {
        if let Some(TraceRecord_oneof_record_oneof::Report(ref v)) = self.record_oneof {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TraceRecord_oneof_record_oneof::NotifyCollect(ref v)) = self.record_oneof {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.record_oneof = ::std::option::Option::Some(TraceRecord_oneof_record_oneof::Report(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.record_oneof = ::std::option::Option::Some(TraceRecord_oneof_record_oneof::NotifyCollect(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.record_oneof {
            match v {
                &TraceRecord_oneof_record_oneof::Report(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TraceRecord_oneof_record_oneof::NotifyCollect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.record_oneof {
            match v {
                &TraceRecord_oneof_record_oneof::Report(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TraceRecord_oneof_record_oneof::NotifyCollect(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceRecord {
        TraceRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Report>(
                    "report",
                    TraceRecord::has_report,
                    TraceRecord::get_report,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NotifyCollect>(
                    "notify_collect",
                    TraceRecord::has_notify_collect,
                    TraceRecord::get_notify_collect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TraceRecord>(
                    "TraceRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TraceRecord {
        static mut instance: ::protobuf::lazy::Lazy<TraceRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TraceRecord,
        };
        unsafe {
            instance.get(TraceRecord::new)
        }
    }
}

impl ::protobuf::Clear for TraceRecord {
    fn clear(&mut self) {
        self.record_oneof = ::std::option::Option::None;
        self.record_oneof = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TraceRecord {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.record_oneof, "record_oneof", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TraceRecord {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.record_oneof, "record_oneof", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteParentSpan {
    // message fields
    pub trace_id: u64,
    pub span_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteParentSpan {
    fn default() -> &'a RemoteParentSpan {
        <RemoteParentSpan as ::protobuf::Message>::default_instance()
    }
}

impl RemoteParentSpan {
    pub fn new() -> RemoteParentSpan {
        ::std::default::Default::default()
    }

    // uint64 trace_id = 1;


    pub fn get_trace_id(&self) -> u64 {
        self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: u64) {
        self.trace_id = v;
    }

    // uint64 span_id = 2;


    pub fn get_span_id(&self) -> u64 {
        self.span_id
    }
    pub fn clear_span_id(&mut self) {
        self.span_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_span_id(&mut self, v: u64) {
        self.span_id = v;
    }
}

impl ::protobuf::Message for RemoteParentSpan {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.trace_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.span_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.trace_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.trace_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.span_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.span_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.trace_id != 0 {
            os.write_uint64(1, self.trace_id)?;
        }
        if self.span_id != 0 {
            os.write_uint64(2, self.span_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteParentSpan {
        RemoteParentSpan::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "trace_id",
                    |m: &RemoteParentSpan| { &m.trace_id },
                    |m: &mut RemoteParentSpan| { &mut m.trace_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "span_id",
                    |m: &RemoteParentSpan| { &m.span_id },
                    |m: &mut RemoteParentSpan| { &mut m.span_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoteParentSpan>(
                    "RemoteParentSpan",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoteParentSpan {
        static mut instance: ::protobuf::lazy::Lazy<RemoteParentSpan> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoteParentSpan,
        };
        unsafe {
            instance.get(RemoteParentSpan::new)
        }
    }
}

impl ::protobuf::Clear for RemoteParentSpan {
    fn clear(&mut self) {
        self.trace_id = 0;
        self.span_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RemoteParentSpan {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.trace_id, "trace_id", buf);
        ::protobuf::PbPrint::fmt(&self.span_id, "span_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RemoteParentSpan {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.trace_id, "trace_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.span_id, "span_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteParentSpan {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TraceContext {
    // message fields
    pub remote_parent_spans: ::protobuf::RepeatedField<RemoteParentSpan>,
    pub duration_threshold_ms: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceContext {
    fn default() -> &'a TraceContext {
        <TraceContext as ::protobuf::Message>::default_instance()
    }
}

impl TraceContext {
    pub fn new() -> TraceContext {
        ::std::default::Default::default()
    }

    // repeated .tracepb.RemoteParentSpan remote_parent_spans = 1;


    pub fn get_remote_parent_spans(&self) -> &[RemoteParentSpan] {
        &self.remote_parent_spans
    }
    pub fn clear_remote_parent_spans(&mut self) {
        self.remote_parent_spans.clear();
    }

    // Param is passed by value, moved
    pub fn set_remote_parent_spans(&mut self, v: ::protobuf::RepeatedField<RemoteParentSpan>) {
        self.remote_parent_spans = v;
    }

    // Mutable pointer to the field.
    pub fn mut_remote_parent_spans(&mut self) -> &mut ::protobuf::RepeatedField<RemoteParentSpan> {
        &mut self.remote_parent_spans
    }

    // Take field
    pub fn take_remote_parent_spans(&mut self) -> ::protobuf::RepeatedField<RemoteParentSpan> {
        ::std::mem::replace(&mut self.remote_parent_spans, ::protobuf::RepeatedField::new())
    }

    // uint32 duration_threshold_ms = 2;


    pub fn get_duration_threshold_ms(&self) -> u32 {
        self.duration_threshold_ms
    }
    pub fn clear_duration_threshold_ms(&mut self) {
        self.duration_threshold_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration_threshold_ms(&mut self, v: u32) {
        self.duration_threshold_ms = v;
    }
}

impl ::protobuf::Message for TraceContext {
    fn is_initialized(&self) -> bool {
        for v in &self.remote_parent_spans {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.remote_parent_spans)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.duration_threshold_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.remote_parent_spans {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.duration_threshold_ms != 0 {
            my_size += ::protobuf::rt::value_size(2, self.duration_threshold_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.remote_parent_spans {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.duration_threshold_ms != 0 {
            os.write_uint32(2, self.duration_threshold_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceContext {
        TraceContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteParentSpan>>(
                    "remote_parent_spans",
                    |m: &TraceContext| { &m.remote_parent_spans },
                    |m: &mut TraceContext| { &mut m.remote_parent_spans },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "duration_threshold_ms",
                    |m: &TraceContext| { &m.duration_threshold_ms },
                    |m: &mut TraceContext| { &mut m.duration_threshold_ms },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TraceContext>(
                    "TraceContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TraceContext {
        static mut instance: ::protobuf::lazy::Lazy<TraceContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TraceContext,
        };
        unsafe {
            instance.get(TraceContext::new)
        }
    }
}

impl ::protobuf::Clear for TraceContext {
    fn clear(&mut self) {
        self.remote_parent_spans.clear();
        self.duration_threshold_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TraceContext {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.remote_parent_spans, "remote_parent_spans", buf);
        ::protobuf::PbPrint::fmt(&self.duration_threshold_ms, "duration_threshold_ms", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TraceContext {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.remote_parent_spans, "remote_parent_spans", &mut s);
        ::protobuf::PbPrint::fmt(&self.duration_threshold_ms, "duration_threshold_ms", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Report {
    // message fields
    pub remote_parent_spans: ::protobuf::RepeatedField<RemoteParentSpan>,
    pub spans: ::protobuf::RepeatedField<Span>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Report {
    fn default() -> &'a Report {
        <Report as ::protobuf::Message>::default_instance()
    }
}

impl Report {
    pub fn new() -> Report {
        ::std::default::Default::default()
    }

    // repeated .tracepb.RemoteParentSpan remote_parent_spans = 1;


    pub fn get_remote_parent_spans(&self) -> &[RemoteParentSpan] {
        &self.remote_parent_spans
    }
    pub fn clear_remote_parent_spans(&mut self) {
        self.remote_parent_spans.clear();
    }

    // Param is passed by value, moved
    pub fn set_remote_parent_spans(&mut self, v: ::protobuf::RepeatedField<RemoteParentSpan>) {
        self.remote_parent_spans = v;
    }

    // Mutable pointer to the field.
    pub fn mut_remote_parent_spans(&mut self) -> &mut ::protobuf::RepeatedField<RemoteParentSpan> {
        &mut self.remote_parent_spans
    }

    // Take field
    pub fn take_remote_parent_spans(&mut self) -> ::protobuf::RepeatedField<RemoteParentSpan> {
        ::std::mem::replace(&mut self.remote_parent_spans, ::protobuf::RepeatedField::new())
    }

    // repeated .tracepb.Span spans = 2;


    pub fn get_spans(&self) -> &[Span] {
        &self.spans
    }
    pub fn clear_spans(&mut self) {
        self.spans.clear();
    }

    // Param is passed by value, moved
    pub fn set_spans(&mut self, v: ::protobuf::RepeatedField<Span>) {
        self.spans = v;
    }

    // Mutable pointer to the field.
    pub fn mut_spans(&mut self) -> &mut ::protobuf::RepeatedField<Span> {
        &mut self.spans
    }

    // Take field
    pub fn take_spans(&mut self) -> ::protobuf::RepeatedField<Span> {
        ::std::mem::replace(&mut self.spans, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Report {
    fn is_initialized(&self) -> bool {
        for v in &self.remote_parent_spans {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.spans {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.remote_parent_spans)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.spans)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.remote_parent_spans {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.spans {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.remote_parent_spans {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.spans {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Report {
        Report::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteParentSpan>>(
                    "remote_parent_spans",
                    |m: &Report| { &m.remote_parent_spans },
                    |m: &mut Report| { &mut m.remote_parent_spans },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Span>>(
                    "spans",
                    |m: &Report| { &m.spans },
                    |m: &mut Report| { &mut m.spans },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Report>(
                    "Report",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Report {
        static mut instance: ::protobuf::lazy::Lazy<Report> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Report,
        };
        unsafe {
            instance.get(Report::new)
        }
    }
}

impl ::protobuf::Clear for Report {
    fn clear(&mut self) {
        self.remote_parent_spans.clear();
        self.spans.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Report {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.remote_parent_spans, "remote_parent_spans", buf);
        ::protobuf::PbPrint::fmt(&self.spans, "spans", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Report {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.remote_parent_spans, "remote_parent_spans", &mut s);
        ::protobuf::PbPrint::fmt(&self.spans, "spans", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Report {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NotifyCollect {
    // message fields
    pub trace_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NotifyCollect {
    fn default() -> &'a NotifyCollect {
        <NotifyCollect as ::protobuf::Message>::default_instance()
    }
}

impl NotifyCollect {
    pub fn new() -> NotifyCollect {
        ::std::default::Default::default()
    }

    // uint64 trace_id = 1;


    pub fn get_trace_id(&self) -> u64 {
        self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: u64) {
        self.trace_id = v;
    }
}

impl ::protobuf::Message for NotifyCollect {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.trace_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.trace_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.trace_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.trace_id != 0 {
            os.write_uint64(1, self.trace_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NotifyCollect {
        NotifyCollect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "trace_id",
                    |m: &NotifyCollect| { &m.trace_id },
                    |m: &mut NotifyCollect| { &mut m.trace_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NotifyCollect>(
                    "NotifyCollect",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NotifyCollect {
        static mut instance: ::protobuf::lazy::Lazy<NotifyCollect> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NotifyCollect,
        };
        unsafe {
            instance.get(NotifyCollect::new)
        }
    }
}

impl ::protobuf::Clear for NotifyCollect {
    fn clear(&mut self) {
        self.trace_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for NotifyCollect {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.trace_id, "trace_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for NotifyCollect {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.trace_id, "trace_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifyCollect {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Span {
    // message fields
    pub span_id: u64,
    pub parent_id: u64,
    pub begin_unix_ns: u64,
    pub duration_ns: u64,
    pub event: ::std::string::String,
    pub properties: ::protobuf::RepeatedField<Property>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Span {
    fn default() -> &'a Span {
        <Span as ::protobuf::Message>::default_instance()
    }
}

impl Span {
    pub fn new() -> Span {
        ::std::default::Default::default()
    }

    // uint64 span_id = 1;


    pub fn get_span_id(&self) -> u64 {
        self.span_id
    }
    pub fn clear_span_id(&mut self) {
        self.span_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_span_id(&mut self, v: u64) {
        self.span_id = v;
    }

    // uint64 parent_id = 2;


    pub fn get_parent_id(&self) -> u64 {
        self.parent_id
    }
    pub fn clear_parent_id(&mut self) {
        self.parent_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_parent_id(&mut self, v: u64) {
        self.parent_id = v;
    }

    // uint64 begin_unix_ns = 3;


    pub fn get_begin_unix_ns(&self) -> u64 {
        self.begin_unix_ns
    }
    pub fn clear_begin_unix_ns(&mut self) {
        self.begin_unix_ns = 0;
    }

    // Param is passed by value, moved
    pub fn set_begin_unix_ns(&mut self, v: u64) {
        self.begin_unix_ns = v;
    }

    // uint64 duration_ns = 4;


    pub fn get_duration_ns(&self) -> u64 {
        self.duration_ns
    }
    pub fn clear_duration_ns(&mut self) {
        self.duration_ns = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration_ns(&mut self, v: u64) {
        self.duration_ns = v;
    }

    // string event = 5;


    pub fn get_event(&self) -> &str {
        &self.event
    }
    pub fn clear_event(&mut self) {
        self.event.clear();
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: ::std::string::String) {
        self.event = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event(&mut self) -> &mut ::std::string::String {
        &mut self.event
    }

    // Take field
    pub fn take_event(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.event, ::std::string::String::new())
    }

    // repeated .tracepb.Property properties = 6;


    pub fn get_properties(&self) -> &[Property] {
        &self.properties
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<Property>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<Property> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<Property> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Span {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.span_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.parent_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.begin_unix_ns = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration_ns = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.event)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.span_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.span_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.parent_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.parent_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.begin_unix_ns != 0 {
            my_size += ::protobuf::rt::value_size(3, self.begin_unix_ns, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.duration_ns != 0 {
            my_size += ::protobuf::rt::value_size(4, self.duration_ns, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.event.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.event);
        }
        for value in &self.properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.span_id != 0 {
            os.write_uint64(1, self.span_id)?;
        }
        if self.parent_id != 0 {
            os.write_uint64(2, self.parent_id)?;
        }
        if self.begin_unix_ns != 0 {
            os.write_uint64(3, self.begin_unix_ns)?;
        }
        if self.duration_ns != 0 {
            os.write_uint64(4, self.duration_ns)?;
        }
        if !self.event.is_empty() {
            os.write_string(5, &self.event)?;
        }
        for v in &self.properties {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Span {
        Span::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "span_id",
                    |m: &Span| { &m.span_id },
                    |m: &mut Span| { &mut m.span_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "parent_id",
                    |m: &Span| { &m.parent_id },
                    |m: &mut Span| { &mut m.parent_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "begin_unix_ns",
                    |m: &Span| { &m.begin_unix_ns },
                    |m: &mut Span| { &mut m.begin_unix_ns },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "duration_ns",
                    |m: &Span| { &m.duration_ns },
                    |m: &mut Span| { &mut m.duration_ns },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "event",
                    |m: &Span| { &m.event },
                    |m: &mut Span| { &mut m.event },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Property>>(
                    "properties",
                    |m: &Span| { &m.properties },
                    |m: &mut Span| { &mut m.properties },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Span>(
                    "Span",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Span {
        static mut instance: ::protobuf::lazy::Lazy<Span> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Span,
        };
        unsafe {
            instance.get(Span::new)
        }
    }
}

impl ::protobuf::Clear for Span {
    fn clear(&mut self) {
        self.span_id = 0;
        self.parent_id = 0;
        self.begin_unix_ns = 0;
        self.duration_ns = 0;
        self.event.clear();
        self.properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Span {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.span_id, "span_id", buf);
        ::protobuf::PbPrint::fmt(&self.parent_id, "parent_id", buf);
        ::protobuf::PbPrint::fmt(&self.begin_unix_ns, "begin_unix_ns", buf);
        ::protobuf::PbPrint::fmt(&self.duration_ns, "duration_ns", buf);
        ::protobuf::PbPrint::fmt(&self.event, "event", buf);
        ::protobuf::PbPrint::fmt(&self.properties, "properties", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Span {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.span_id, "span_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.parent_id, "parent_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.begin_unix_ns, "begin_unix_ns", &mut s);
        ::protobuf::PbPrint::fmt(&self.duration_ns, "duration_ns", &mut s);
        ::protobuf::PbPrint::fmt(&self.event, "event", &mut s);
        ::protobuf::PbPrint::fmt(&self.properties, "properties", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Span {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Property {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Property {
    fn default() -> &'a Property {
        <Property as ::protobuf::Message>::default_instance()
    }
}

impl Property {
    pub fn new() -> Property {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Property {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Property {
        Property::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Property| { &m.key },
                    |m: &mut Property| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Property| { &m.value },
                    |m: &mut Property| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Property>(
                    "Property",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Property {
        static mut instance: ::protobuf::lazy::Lazy<Property> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Property,
        };
        unsafe {
            instance.get(Property::new)
        }
    }
}

impl ::protobuf::Clear for Property {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Property {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.key, "key", buf);
        ::protobuf::PbPrint::fmt(&self.value, "value", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Property {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.key, "key", &mut s);
        ::protobuf::PbPrint::fmt(&self.value, "value", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Property {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rtracepb.proto\x12\x07tracepb\"\x14\n\x12TraceRecordRequest\"\x89\x01\
    \n\x0bTraceRecord\x12)\n\x06report\x18\x01\x20\x01(\x0b2\x0f.tracepb.Rep\
    ortH\0R\x06report\x12?\n\x0enotify_collect\x18\x02\x20\x01(\x0b2\x16.tra\
    cepb.NotifyCollectH\0R\rnotifyCollectB\x0e\n\x0crecord_oneof\"F\n\x10Rem\
    oteParentSpan\x12\x19\n\x08trace_id\x18\x01\x20\x01(\x04R\x07traceId\x12\
    \x17\n\x07span_id\x18\x02\x20\x01(\x04R\x06spanId\"\x8d\x01\n\x0cTraceCo\
    ntext\x12I\n\x13remote_parent_spans\x18\x01\x20\x03(\x0b2\x19.tracepb.Re\
    moteParentSpanR\x11remoteParentSpans\x122\n\x15duration_threshold_ms\x18\
    \x02\x20\x01(\rR\x13durationThresholdMs\"x\n\x06Report\x12I\n\x13remote_\
    parent_spans\x18\x01\x20\x03(\x0b2\x19.tracepb.RemoteParentSpanR\x11remo\
    teParentSpans\x12#\n\x05spans\x18\x02\x20\x03(\x0b2\r.tracepb.SpanR\x05s\
    pans\"*\n\rNotifyCollect\x12\x19\n\x08trace_id\x18\x01\x20\x01(\x04R\x07\
    traceId\"\xca\x01\n\x04Span\x12\x17\n\x07span_id\x18\x01\x20\x01(\x04R\
    \x06spanId\x12\x1b\n\tparent_id\x18\x02\x20\x01(\x04R\x08parentId\x12\"\
    \n\rbegin_unix_ns\x18\x03\x20\x01(\x04R\x0bbeginUnixNs\x12\x1f\n\x0bdura\
    tion_ns\x18\x04\x20\x01(\x04R\ndurationNs\x12\x14\n\x05event\x18\x05\x20\
    \x01(\tR\x05event\x121\n\nproperties\x18\x06\x20\x03(\x0b2\x11.tracepb.P\
    ropertyR\nproperties\"2\n\x08Property\x12\x10\n\x03key\x18\x01\x20\x01(\
    \tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value2W\n\x11TraceR\
    ecordPubSub\x12B\n\tSubscribe\x12\x1b.tracepb.TraceRecordRequest\x1a\x14\
    .tracepb.TraceRecord\"\00\x01B\x12\n\x10org.tikv.kvprotoJ\x89\x10\n\x06\
    \x12\x04\0\0;\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x01\0\x10\n\x08\n\x01\x08\x12\x03\x03\0)\n\t\n\x02\x08\x01\x12\x03\
    \x03\0)\n\n\n\x02\x06\0\x12\x04\x05\0\t\x01\n\n\n\x03\x06\0\x01\x12\x03\
    \x05\x08\x19\n\xab\x01\n\x04\x06\0\x02\0\x12\x03\x08\x04E\x1a\x9d\x01\
    \x20Subscribe\x20the\x20Trace\x20records\x20generated\x20on\x20this\x20s\
    ervice.\x20The\x20service\x20will\x20periodically\x20(e.g.\x20per\x20min\
    ute)\n\x20publishes\x20Trace\x20records\x20to\x20clients\x20via\x20gRPC\
    \x20stream.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x08\x11\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x08\x12$\n\x0c\n\x05\x06\0\x02\0\x06\x12\
    \x03\x08/5\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x086A\n\t\n\x02\x04\0\x12\
    \x03\x0b\0\x1d\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x1a\n\n\n\x02\x04\x01\
    \x12\x04\r\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x13\n\x0c\n\x04\
    \x04\x01\x08\0\x12\x04\x0e\x04\x11\x05\n\x0c\n\x05\x04\x01\x08\0\x01\x12\
    \x03\x0e\n\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0f\x08\x1a\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x0f\x0f\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x18\x19\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x03\x10\x08)\n\x0c\n\x05\x04\x01\x02\x01\x06\
    \x12\x03\x10\x08\x15\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x16$\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x10'(\n\n\n\x02\x04\x02\x12\x04\
    \x14\0\x19\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x18\nH\n\x04\x04\
    \x02\x02\0\x12\x03\x16\x04\x18\x1a;\x20A\x20unique\x20id\x20to\x20identi\
    fy\x20the\x20request.\x20It's\x20usually\x20a\x20UUID.\n\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x16\x0b\x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x16\x16\x17\nF\n\x04\
    \x04\x02\x02\x01\x12\x03\x18\x04\x17\x1a9\x20The\x20span\x20of\x20remote\
    \x20caller\x20that\x20is\x20awaiting\x20the\x20request.\n\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x18\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\x15\x16\
    \n6\n\x02\x04\x03\x12\x04\x1c\0\x20\x01\x1a*\x20The\x20context\x20of\x20\
    the\x20request\x20to\x20be\x20traced.\n\n\n\n\x03\x04\x03\x01\x12\x03\
    \x1c\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1d\x046\n\x0c\n\x05\x04\
    \x03\x02\0\x04\x12\x03\x1d\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\
    \x1d\r\x1d\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1d\x1e1\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x1d45\nk\n\x04\x04\x03\x02\x01\x12\x03\x1f\
    \x04%\x1a^\x20Report\x20the\x20trace\x20records\x20only\x20if\x20the\x20\
    duration\x20of\x20handling\x20the\x20request\x20exceeds\x20the\x20thresh\
    old.\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03\x1f\x0b\x20\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03\x1f#$\nN\n\x02\x04\x04\x12\x04#\0&\x01\x1aB\x20Report\x20the\x20spa\
    ns\x20collected\x20when\x20handling\x20a\x20request\x20on\x20a\x20servic\
    e.\n\n\n\n\x03\x04\x04\x01\x12\x03#\x08\x0e\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03$\x046\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03$\x04\x0c\n\x0c\n\
    \x05\x04\x04\x02\0\x06\x12\x03$\r\x1d\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x03$\x1e1\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03$45\n\x0b\n\x04\x04\x04\
    \x02\x01\x12\x03%\x04\x1c\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03%\x04\
    \x0c\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03%\r\x11\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03%\x12\x17\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03%\
    \x1a\x1b\nE\n\x02\x04\x05\x12\x04)\0+\x01\x1a9\x20Notify\x20the\x20subsc\
    riber\x20to\x20persis\x20the\x20spans\x20of\x20the\x20trace.\n\n\n\n\x03\
    \x04\x05\x01\x12\x03)\x08\x15\n\x0b\n\x04\x04\x05\x02\0\x12\x03*\x04\x18\
    \n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03*\x04\n\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03*\x0b\x13\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03*\x16\x17\n\n\
    \n\x02\x04\x06\x12\x04-\06\x01\n\n\n\x03\x04\x06\x01\x12\x03-\x08\x0c\n\
    \xa7\x01\n\x04\x04\x06\x02\0\x12\x030\x04\x17\x1a\x99\x01\x20The\x20uniq\
    ue\x20span\x20id\x20within\x20the\x20spans\x20with\x20the\x20same\x20`tr\
    ace_id`.\n\x20The\x20most\x20significant\x2032\x20bits\x20should\x20be\
    \x20random\x20number\x20generated\x20by\x20each\x20service\x20instance.\
    \n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x030\x04\n\n\x0c\n\x05\x04\x06\x02\
    \0\x01\x12\x030\x0b\x12\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x030\x15\x16\n\
    \x0b\n\x04\x04\x06\x02\x01\x12\x031\x04\x19\n\x0c\n\x05\x04\x06\x02\x01\
    \x05\x12\x031\x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x031\x0b\x14\n\
    \x0c\n\x05\x04\x06\x02\x01\x03\x12\x031\x17\x18\n\x0b\n\x04\x04\x06\x02\
    \x02\x12\x032\x04\x1d\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x032\x04\n\n\
    \x0c\n\x05\x04\x06\x02\x02\x01\x12\x032\x0b\x18\n\x0c\n\x05\x04\x06\x02\
    \x02\x03\x12\x032\x1b\x1c\n\x0b\n\x04\x04\x06\x02\x03\x12\x033\x04\x1b\n\
    \x0c\n\x05\x04\x06\x02\x03\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x06\x02\
    \x03\x01\x12\x033\x0b\x16\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x033\x19\
    \x1a\n\x0b\n\x04\x04\x06\x02\x04\x12\x034\x04\x15\n\x0c\n\x05\x04\x06\
    \x02\x04\x05\x12\x034\x04\n\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\x034\x0b\
    \x10\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x034\x13\x14\n\x0b\n\x04\x04\
    \x06\x02\x05\x12\x035\x04%\n\x0c\n\x05\x04\x06\x02\x05\x04\x12\x035\x04\
    \x0c\n\x0c\n\x05\x04\x06\x02\x05\x06\x12\x035\r\x15\n\x0c\n\x05\x04\x06\
    \x02\x05\x01\x12\x035\x16\x20\n\x0c\n\x05\x04\x06\x02\x05\x03\x12\x035#$\
    \n\n\n\x02\x04\x07\x12\x048\0;\x01\n\n\n\x03\x04\x07\x01\x12\x038\x08\
    \x10\n\x0b\n\x04\x04\x07\x02\0\x12\x039\x04\x13\n\x0c\n\x05\x04\x07\x02\
    \0\x05\x12\x039\x04\n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x039\x0b\x0e\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x039\x11\x12\n\x0b\n\x04\x04\x07\x02\
    \x01\x12\x03:\x04\x15\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03:\x04\n\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03:\x0b\x10\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03:\x13\x14b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
pub use super::tracepb_grpc::*;
