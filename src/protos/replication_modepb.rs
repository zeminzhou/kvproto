// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `replication_modepb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReplicationStatus {
    // message fields
    pub mode: ReplicationMode,
    pub dr_auto_sync: ::protobuf::SingularPtrField<DrAutoSync>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReplicationStatus {
    fn default() -> &'a ReplicationStatus {
        <ReplicationStatus as ::protobuf::Message>::default_instance()
    }
}

impl ReplicationStatus {
    pub fn new() -> ReplicationStatus {
        ::std::default::Default::default()
    }

    // .replication_modepb.ReplicationMode mode = 1;


    pub fn get_mode(&self) -> ReplicationMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = ReplicationMode::Majority;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: ReplicationMode) {
        self.mode = v;
    }

    // .replication_modepb.DRAutoSync dr_auto_sync = 2;


    pub fn get_dr_auto_sync(&self) -> &DrAutoSync {
        self.dr_auto_sync.as_ref().unwrap_or_else(|| DrAutoSync::default_instance())
    }
    pub fn clear_dr_auto_sync(&mut self) {
        self.dr_auto_sync.clear();
    }

    pub fn has_dr_auto_sync(&self) -> bool {
        self.dr_auto_sync.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dr_auto_sync(&mut self, v: DrAutoSync) {
        self.dr_auto_sync = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dr_auto_sync(&mut self) -> &mut DrAutoSync {
        if self.dr_auto_sync.is_none() {
            self.dr_auto_sync.set_default();
        }
        self.dr_auto_sync.as_mut().unwrap()
    }

    // Take field
    pub fn take_dr_auto_sync(&mut self) -> DrAutoSync {
        self.dr_auto_sync.take().unwrap_or_else(|| DrAutoSync::new())
    }
}

impl ::protobuf::Message for ReplicationStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.dr_auto_sync {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.mode = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dr_auto_sync)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mode != ReplicationMode::Majority {
            my_size += ::protobuf::rt::enum_size(1, self.mode);
        }
        if let Some(ref v) = self.dr_auto_sync.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.mode != ReplicationMode::Majority {
            os.write_enum(1, self.mode.value())?;
        }
        if let Some(ref v) = self.dr_auto_sync.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReplicationStatus {
        ReplicationStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ReplicationMode>>(
                    "mode",
                    |m: &ReplicationStatus| { &m.mode },
                    |m: &mut ReplicationStatus| { &mut m.mode },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DrAutoSync>>(
                    "dr_auto_sync",
                    |m: &ReplicationStatus| { &m.dr_auto_sync },
                    |m: &mut ReplicationStatus| { &mut m.dr_auto_sync },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReplicationStatus>(
                    "ReplicationStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReplicationStatus {
        static mut instance: ::protobuf::lazy::Lazy<ReplicationStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReplicationStatus,
        };
        unsafe {
            instance.get(ReplicationStatus::new)
        }
    }
}

impl ::protobuf::Clear for ReplicationStatus {
    fn clear(&mut self) {
        self.mode = ReplicationMode::Majority;
        self.dr_auto_sync.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ReplicationStatus {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.mode, "mode", buf);
        ::protobuf::PbPrint::fmt(&self.dr_auto_sync, "dr_auto_sync", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ReplicationStatus {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.mode, "mode", &mut s);
        ::protobuf::PbPrint::fmt(&self.dr_auto_sync, "dr_auto_sync", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplicationStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DrAutoSync {
    // message fields
    pub label_key: ::std::string::String,
    pub state: DrAutoSyncState,
    pub state_id: u64,
    pub wait_sync_timeout_hint: i32,
    pub available_stores: ::std::vec::Vec<u64>,
    pub pause_region_split: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DrAutoSync {
    fn default() -> &'a DrAutoSync {
        <DrAutoSync as ::protobuf::Message>::default_instance()
    }
}

impl DrAutoSync {
    pub fn new() -> DrAutoSync {
        ::std::default::Default::default()
    }

    // string label_key = 1;


    pub fn get_label_key(&self) -> &str {
        &self.label_key
    }
    pub fn clear_label_key(&mut self) {
        self.label_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_label_key(&mut self, v: ::std::string::String) {
        self.label_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label_key(&mut self) -> &mut ::std::string::String {
        &mut self.label_key
    }

    // Take field
    pub fn take_label_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label_key, ::std::string::String::new())
    }

    // .replication_modepb.DRAutoSyncState state = 2;


    pub fn get_state(&self) -> DrAutoSyncState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = DrAutoSyncState::Sync;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: DrAutoSyncState) {
        self.state = v;
    }

    // uint64 state_id = 3;


    pub fn get_state_id(&self) -> u64 {
        self.state_id
    }
    pub fn clear_state_id(&mut self) {
        self.state_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_state_id(&mut self, v: u64) {
        self.state_id = v;
    }

    // int32 wait_sync_timeout_hint = 4;


    pub fn get_wait_sync_timeout_hint(&self) -> i32 {
        self.wait_sync_timeout_hint
    }
    pub fn clear_wait_sync_timeout_hint(&mut self) {
        self.wait_sync_timeout_hint = 0;
    }

    // Param is passed by value, moved
    pub fn set_wait_sync_timeout_hint(&mut self, v: i32) {
        self.wait_sync_timeout_hint = v;
    }

    // repeated uint64 available_stores = 5;


    pub fn get_available_stores(&self) -> &[u64] {
        &self.available_stores
    }
    pub fn clear_available_stores(&mut self) {
        self.available_stores.clear();
    }

    // Param is passed by value, moved
    pub fn set_available_stores(&mut self, v: ::std::vec::Vec<u64>) {
        self.available_stores = v;
    }

    // Mutable pointer to the field.
    pub fn mut_available_stores(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.available_stores
    }

    // Take field
    pub fn take_available_stores(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.available_stores, ::std::vec::Vec::new())
    }

    // bool pause_region_split = 6;


    pub fn get_pause_region_split(&self) -> bool {
        self.pause_region_split
    }
    pub fn clear_pause_region_split(&mut self) {
        self.pause_region_split = false;
    }

    // Param is passed by value, moved
    pub fn set_pause_region_split(&mut self, v: bool) {
        self.pause_region_split = v;
    }
}

impl ::protobuf::Message for DrAutoSync {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label_key)?;
                },
                2 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.state_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.wait_sync_timeout_hint = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.available_stores)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.pause_region_split = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label_key);
        }
        if self.state != DrAutoSyncState::Sync {
            my_size += ::protobuf::rt::enum_size(2, self.state);
        }
        if self.state_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.state_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.wait_sync_timeout_hint != 0 {
            my_size += ::protobuf::rt::value_size(4, self.wait_sync_timeout_hint, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.available_stores {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.pause_region_split != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.label_key.is_empty() {
            os.write_string(1, &self.label_key)?;
        }
        if self.state != DrAutoSyncState::Sync {
            os.write_enum(2, self.state.value())?;
        }
        if self.state_id != 0 {
            os.write_uint64(3, self.state_id)?;
        }
        if self.wait_sync_timeout_hint != 0 {
            os.write_int32(4, self.wait_sync_timeout_hint)?;
        }
        for v in &self.available_stores {
            os.write_uint64(5, *v)?;
        };
        if self.pause_region_split != false {
            os.write_bool(6, self.pause_region_split)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DrAutoSync {
        DrAutoSync::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label_key",
                    |m: &DrAutoSync| { &m.label_key },
                    |m: &mut DrAutoSync| { &mut m.label_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DrAutoSyncState>>(
                    "state",
                    |m: &DrAutoSync| { &m.state },
                    |m: &mut DrAutoSync| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "state_id",
                    |m: &DrAutoSync| { &m.state_id },
                    |m: &mut DrAutoSync| { &mut m.state_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "wait_sync_timeout_hint",
                    |m: &DrAutoSync| { &m.wait_sync_timeout_hint },
                    |m: &mut DrAutoSync| { &mut m.wait_sync_timeout_hint },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "available_stores",
                    |m: &DrAutoSync| { &m.available_stores },
                    |m: &mut DrAutoSync| { &mut m.available_stores },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "pause_region_split",
                    |m: &DrAutoSync| { &m.pause_region_split },
                    |m: &mut DrAutoSync| { &mut m.pause_region_split },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DrAutoSync>(
                    "DrAutoSync",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DrAutoSync {
        static mut instance: ::protobuf::lazy::Lazy<DrAutoSync> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DrAutoSync,
        };
        unsafe {
            instance.get(DrAutoSync::new)
        }
    }
}

impl ::protobuf::Clear for DrAutoSync {
    fn clear(&mut self) {
        self.label_key.clear();
        self.state = DrAutoSyncState::Sync;
        self.state_id = 0;
        self.wait_sync_timeout_hint = 0;
        self.available_stores.clear();
        self.pause_region_split = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DrAutoSync {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.label_key, "label_key", buf);
        ::protobuf::PbPrint::fmt(&self.state, "state", buf);
        ::protobuf::PbPrint::fmt(&self.state_id, "state_id", buf);
        ::protobuf::PbPrint::fmt(&self.wait_sync_timeout_hint, "wait_sync_timeout_hint", buf);
        ::protobuf::PbPrint::fmt(&self.available_stores, "available_stores", buf);
        ::protobuf::PbPrint::fmt(&self.pause_region_split, "pause_region_split", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DrAutoSync {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.label_key, "label_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.state, "state", &mut s);
        ::protobuf::PbPrint::fmt(&self.state_id, "state_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.wait_sync_timeout_hint, "wait_sync_timeout_hint", &mut s);
        ::protobuf::PbPrint::fmt(&self.available_stores, "available_stores", &mut s);
        ::protobuf::PbPrint::fmt(&self.pause_region_split, "pause_region_split", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DrAutoSync {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegionReplicationStatus {
    // message fields
    pub state: RegionReplicationState,
    pub state_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegionReplicationStatus {
    fn default() -> &'a RegionReplicationStatus {
        <RegionReplicationStatus as ::protobuf::Message>::default_instance()
    }
}

impl RegionReplicationStatus {
    pub fn new() -> RegionReplicationStatus {
        ::std::default::Default::default()
    }

    // .replication_modepb.RegionReplicationState state = 1;


    pub fn get_state(&self) -> RegionReplicationState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = RegionReplicationState::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: RegionReplicationState) {
        self.state = v;
    }

    // uint64 state_id = 2;


    pub fn get_state_id(&self) -> u64 {
        self.state_id
    }
    pub fn clear_state_id(&mut self) {
        self.state_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_state_id(&mut self, v: u64) {
        self.state_id = v;
    }
}

impl ::protobuf::Message for RegionReplicationStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.state_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != RegionReplicationState::Unknown {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if self.state_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.state_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.state != RegionReplicationState::Unknown {
            os.write_enum(1, self.state.value())?;
        }
        if self.state_id != 0 {
            os.write_uint64(2, self.state_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegionReplicationStatus {
        RegionReplicationStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RegionReplicationState>>(
                    "state",
                    |m: &RegionReplicationStatus| { &m.state },
                    |m: &mut RegionReplicationStatus| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "state_id",
                    |m: &RegionReplicationStatus| { &m.state_id },
                    |m: &mut RegionReplicationStatus| { &mut m.state_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RegionReplicationStatus>(
                    "RegionReplicationStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RegionReplicationStatus {
        static mut instance: ::protobuf::lazy::Lazy<RegionReplicationStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RegionReplicationStatus,
        };
        unsafe {
            instance.get(RegionReplicationStatus::new)
        }
    }
}

impl ::protobuf::Clear for RegionReplicationStatus {
    fn clear(&mut self) {
        self.state = RegionReplicationState::Unknown;
        self.state_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RegionReplicationStatus {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.state, "state", buf);
        ::protobuf::PbPrint::fmt(&self.state_id, "state_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RegionReplicationStatus {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.state, "state", &mut s);
        ::protobuf::PbPrint::fmt(&self.state_id, "state_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegionReplicationStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StoreDrAutoSyncStatus {
    // message fields
    pub state: DrAutoSyncState,
    pub state_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StoreDrAutoSyncStatus {
    fn default() -> &'a StoreDrAutoSyncStatus {
        <StoreDrAutoSyncStatus as ::protobuf::Message>::default_instance()
    }
}

impl StoreDrAutoSyncStatus {
    pub fn new() -> StoreDrAutoSyncStatus {
        ::std::default::Default::default()
    }

    // .replication_modepb.DRAutoSyncState state = 1;


    pub fn get_state(&self) -> DrAutoSyncState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = DrAutoSyncState::Sync;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: DrAutoSyncState) {
        self.state = v;
    }

    // uint64 state_id = 2;


    pub fn get_state_id(&self) -> u64 {
        self.state_id
    }
    pub fn clear_state_id(&mut self) {
        self.state_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_state_id(&mut self, v: u64) {
        self.state_id = v;
    }
}

impl ::protobuf::Message for StoreDrAutoSyncStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.state_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != DrAutoSyncState::Sync {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if self.state_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.state_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.state != DrAutoSyncState::Sync {
            os.write_enum(1, self.state.value())?;
        }
        if self.state_id != 0 {
            os.write_uint64(2, self.state_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StoreDrAutoSyncStatus {
        StoreDrAutoSyncStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DrAutoSyncState>>(
                    "state",
                    |m: &StoreDrAutoSyncStatus| { &m.state },
                    |m: &mut StoreDrAutoSyncStatus| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "state_id",
                    |m: &StoreDrAutoSyncStatus| { &m.state_id },
                    |m: &mut StoreDrAutoSyncStatus| { &mut m.state_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StoreDrAutoSyncStatus>(
                    "StoreDrAutoSyncStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StoreDrAutoSyncStatus {
        static mut instance: ::protobuf::lazy::Lazy<StoreDrAutoSyncStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StoreDrAutoSyncStatus,
        };
        unsafe {
            instance.get(StoreDrAutoSyncStatus::new)
        }
    }
}

impl ::protobuf::Clear for StoreDrAutoSyncStatus {
    fn clear(&mut self) {
        self.state = DrAutoSyncState::Sync;
        self.state_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for StoreDrAutoSyncStatus {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.state, "state", buf);
        ::protobuf::PbPrint::fmt(&self.state_id, "state_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for StoreDrAutoSyncStatus {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.state, "state", &mut s);
        ::protobuf::PbPrint::fmt(&self.state_id, "state_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreDrAutoSyncStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ReplicationMode {
    Majority = 0,
    DrAutoSync = 1,
}

impl ::protobuf::ProtobufEnum for ReplicationMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReplicationMode> {
        match value {
            0 => ::std::option::Option::Some(ReplicationMode::Majority),
            1 => ::std::option::Option::Some(ReplicationMode::DrAutoSync),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReplicationMode] = &[
            ReplicationMode::Majority,
            ReplicationMode::DrAutoSync,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ReplicationMode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ReplicationMode {
}

impl ::protobuf::PbPrint for ReplicationMode {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == ReplicationMode::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for ReplicationMode {
    fn default() -> Self {
        ReplicationMode::Majority
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplicationMode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DrAutoSyncState {
    Sync = 0,
    AsyncWait = 1,
    Async = 2,
    SyncRecover = 3,
}

impl ::protobuf::ProtobufEnum for DrAutoSyncState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DrAutoSyncState> {
        match value {
            0 => ::std::option::Option::Some(DrAutoSyncState::Sync),
            1 => ::std::option::Option::Some(DrAutoSyncState::AsyncWait),
            2 => ::std::option::Option::Some(DrAutoSyncState::Async),
            3 => ::std::option::Option::Some(DrAutoSyncState::SyncRecover),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DrAutoSyncState] = &[
            DrAutoSyncState::Sync,
            DrAutoSyncState::AsyncWait,
            DrAutoSyncState::Async,
            DrAutoSyncState::SyncRecover,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("DrAutoSyncState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for DrAutoSyncState {
}

impl ::protobuf::PbPrint for DrAutoSyncState {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == DrAutoSyncState::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for DrAutoSyncState {
    fn default() -> Self {
        DrAutoSyncState::Sync
    }
}

impl ::protobuf::reflect::ProtobufValue for DrAutoSyncState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RegionReplicationState {
    Unknown = 0,
    SimpleMajority = 1,
    IntegrityOverLabel = 2,
}

impl ::protobuf::ProtobufEnum for RegionReplicationState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RegionReplicationState> {
        match value {
            0 => ::std::option::Option::Some(RegionReplicationState::Unknown),
            1 => ::std::option::Option::Some(RegionReplicationState::SimpleMajority),
            2 => ::std::option::Option::Some(RegionReplicationState::IntegrityOverLabel),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RegionReplicationState] = &[
            RegionReplicationState::Unknown,
            RegionReplicationState::SimpleMajority,
            RegionReplicationState::IntegrityOverLabel,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RegionReplicationState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RegionReplicationState {
}

impl ::protobuf::PbPrint for RegionReplicationState {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == RegionReplicationState::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for RegionReplicationState {
    fn default() -> Self {
        RegionReplicationState::Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for RegionReplicationState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18replication_modepb.proto\x12\x12replication_modepb\"\x8e\x01\n\x11\
    ReplicationStatus\x127\n\x04mode\x18\x01\x20\x01(\x0e2#.replication_mode\
    pb.ReplicationModeR\x04mode\x12@\n\x0cdr_auto_sync\x18\x02\x20\x01(\x0b2\
    \x1e.replication_modepb.DRAutoSyncR\ndrAutoSync\"\x8d\x02\n\nDRAutoSync\
    \x12\x1b\n\tlabel_key\x18\x01\x20\x01(\tR\x08labelKey\x129\n\x05state\
    \x18\x02\x20\x01(\x0e2#.replication_modepb.DRAutoSyncStateR\x05state\x12\
    \x19\n\x08state_id\x18\x03\x20\x01(\x04R\x07stateId\x123\n\x16wait_sync_\
    timeout_hint\x18\x04\x20\x01(\x05R\x13waitSyncTimeoutHint\x12)\n\x10avai\
    lable_stores\x18\x05\x20\x03(\x04R\x0favailableStores\x12,\n\x12pause_re\
    gion_split\x18\x06\x20\x01(\x08R\x10pauseRegionSplit\"v\n\x17RegionRepli\
    cationStatus\x12@\n\x05state\x18\x01\x20\x01(\x0e2*.replication_modepb.R\
    egionReplicationStateR\x05state\x12\x19\n\x08state_id\x18\x02\x20\x01(\
    \x04R\x07stateId\"m\n\x15StoreDRAutoSyncStatus\x129\n\x05state\x18\x01\
    \x20\x01(\x0e2#.replication_modepb.DRAutoSyncStateR\x05state\x12\x19\n\
    \x08state_id\x18\x02\x20\x01(\x04R\x07stateId*1\n\x0fReplicationMode\x12\
    \x0c\n\x08MAJORITY\x10\0\x12\x10\n\x0cDR_AUTO_SYNC\x10\x01*H\n\x0fDRAuto\
    SyncState\x12\x08\n\x04SYNC\x10\0\x12\x0e\n\nASYNC_WAIT\x10\x01\x12\t\n\
    \x05ASYNC\x10\x02\x12\x10\n\x0cSYNC_RECOVER\x10\x03*T\n\x16RegionReplica\
    tionState\x12\x0b\n\x07UNKNOWN\x10\0\x12\x13\n\x0fSIMPLE_MAJORITY\x10\
    \x01\x12\x18\n\x14INTEGRITY_OVER_LABEL\x10\x02J\xe5\x10\n\x06\x12\x04\0\
    \0=\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\
    \x1b\n\n\n\x02\x05\0\x12\x04\x03\0\x08\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x03\x05\x14\nB\n\x04\x05\0\x02\0\x12\x03\x05\x04\x11\x1a5\x20The\x20sta\
    ndard\x20mode.\x20Replicate\x20logs\x20to\x20majority\x20peer.\n\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x05\x04\x0c\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x05\x0f\x10\n3\n\x04\x05\0\x02\x01\x12\x03\x07\x04\x15\x1a&\x20DR\
    \x20mode.\x20Replicate\x20logs\x20among\x202\x20DCs.\n\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x07\x04\x10\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x07\x13\x14\n:\n\x02\x04\0\x12\x04\x0b\0\x0e\x01\x1a.\x20The\x20replica\
    tion\x20status\x20sync\x20from\x20PD\x20to\x20TiKV.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x0b\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x04\x1d\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x04\x13\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0c\x14\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x1b\x1c\
    \n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x04\x20\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03\r\x04\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x0f\x1b\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r\x1e\x1f\n\n\n\x02\x05\x01\x12\x04\
    \x10\0\x19\x01\n\n\n\x03\x05\x01\x01\x12\x03\x10\x05\x14\n;\n\x04\x05\
    \x01\x02\0\x12\x03\x12\x04\r\x1a.\x20Raft\x20logs\x20need\x20to\x20sync\
    \x20between\x20different\x20DCs\n\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\
    \x12\x04\x08\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x12\x0b\x0c\nL\n\x04\
    \x05\x01\x02\x01\x12\x03\x14\x04\x13\x1a?\x20Wait\x20for\x20switching\
    \x20to\x20ASYNC.\x20Stop\x20sync\x20raft\x20logs\x20between\x20DCs.\n\n\
    \x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x14\x04\x0e\n\x0c\n\x05\x05\x01\
    \x02\x01\x02\x12\x03\x14\x11\x12\n7\n\x04\x05\x01\x02\x02\x12\x03\x16\
    \x04\x0e\x1a*\x20Raft\x20logs\x20need\x20to\x20sync\x20to\x20majority\
    \x20peers\n\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x16\x04\t\n\x0c\n\
    \x05\x05\x01\x02\x02\x02\x12\x03\x16\x0c\r\n0\n\x04\x05\x01\x02\x03\x12\
    \x03\x18\x04\x15\x1a#\x20Switching\x20from\x20ASYNC\x20to\x20SYNC\x20mod\
    e\n\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x18\x04\x10\n\x0c\n\x05\x05\
    \x01\x02\x03\x02\x12\x03\x18\x13\x14\n-\n\x02\x04\x01\x12\x04\x1c\0(\x01\
    \x1a!\x20The\x20status\x20of\x20dr-autosync\x20mode.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1c\x08\x12\nK\n\x04\x04\x01\x02\0\x12\x03\x1e\x04\x19\x1a>\
    \x20The\x20key\x20of\x20the\x20label\x20that\x20used\x20for\x20distingui\
    sh\x20different\x20DC.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1e\x04\n\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1e\x0b\x14\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x1e\x17\x18\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1f\
    \x04\x1e\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x1f\x04\x13\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x1f\x14\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x1f\x1c\x1d\nN\n\x04\x04\x01\x02\x02\x12\x03!\x04\x18\x1aA\x20U\
    nique\x20ID\x20of\x20the\x20state,\x20it\x20increases\x20after\x20each\
    \x20state\x20transfer.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03!\x04\n\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03!\x0b\x13\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03!\x16\x17\nN\n\x04\x04\x01\x02\x03\x12\x03#\x04%\x1a\
    A\x20Duration\x20to\x20wait\x20before\x20switching\x20to\x20SYNC\x20by\
    \x20force\x20(in\x20seconds)\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03#\
    \x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03#\n\x20\n\x0c\n\x05\x04\
    \x01\x02\x03\x03\x12\x03##$\nh\n\x04\x04\x01\x02\x04\x12\x03%\x04)\x1a[\
    \x20Stores\x20should\x20only\x20sync\x20messages\x20with\x20available\
    \x20stores\x20when\x20state\x20is\x20ASYNC\x20or\x20ASYNC_WAIT.\n\n\x0c\
    \n\x05\x04\x01\x02\x04\x04\x12\x03%\x04\x0c\n\x0c\n\x05\x04\x01\x02\x04\
    \x05\x12\x03%\r\x13\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03%\x14$\n\x0c\
    \n\x05\x04\x01\x02\x04\x03\x12\x03%'(\n1\n\x04\x04\x01\x02\x05\x12\x03'\
    \x04\x20\x1a$\x20Stores\x20should\x20forbid\x20region\x20split.\n\n\x0c\
    \n\x05\x04\x01\x02\x05\x05\x12\x03'\x04\x08\n\x0c\n\x05\x04\x01\x02\x05\
    \x01\x12\x03'\t\x1b\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03'\x1e\x1f\n\n\
    \n\x02\x05\x02\x12\x04*\01\x01\n\n\n\x03\x05\x02\x01\x12\x03*\x05\x1b\n,\
    \n\x04\x05\x02\x02\0\x12\x03,\x04\x10\x1a\x1f\x20The\x20region's\x20stat\
    e\x20is\x20unknown\n\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03,\x04\x0b\n\
    \x0c\n\x05\x05\x02\x02\0\x02\x12\x03,\x0e\x0f\n*\n\x04\x05\x02\x02\x01\
    \x12\x03.\x04\x18\x1a\x1d\x20Logs\x20sync\x20to\x20majority\x20peers\n\n\
    \x0c\n\x05\x05\x02\x02\x01\x01\x12\x03.\x04\x13\n\x0c\n\x05\x05\x02\x02\
    \x01\x02\x12\x03.\x16\x17\n)\n\x04\x05\x02\x02\x02\x12\x030\x04\x1d\x1a\
    \x1c\x20Logs\x20sync\x20to\x20different\x20DCs\n\n\x0c\n\x05\x05\x02\x02\
    \x02\x01\x12\x030\x04\x18\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x030\x1b\
    \x1c\n:\n\x02\x04\x02\x12\x044\08\x01\x1a.\x20The\x20replication\x20stat\
    us\x20sync\x20from\x20TiKV\x20to\x20PD.\n\n\n\n\x03\x04\x02\x01\x12\x034\
    \x08\x1f\n\x0b\n\x04\x04\x02\x02\0\x12\x035\x04%\n\x0c\n\x05\x04\x02\x02\
    \0\x06\x12\x035\x04\x1a\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x035\x1b\x20\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x035#$\nN\n\x04\x04\x02\x02\x01\x12\x03\
    7\x04\x18\x1aA\x20Unique\x20ID\x20of\x20the\x20state,\x20it\x20increases\
    \x20after\x20each\x20state\x20transfer.\n\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x037\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x037\x0b\x13\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x037\x16\x17\n\n\n\x02\x04\x03\x12\
    \x04:\0=\x01\n\n\n\x03\x04\x03\x01\x12\x03:\x08\x1d\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03;\x04\x1e\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03;\x04\x13\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03;\x14\x19\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03;\x1c\x1d\n\x0b\n\x04\x04\x03\x02\x01\x12\x03<\x04\x18\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03<\x04\n\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03<\x0b\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03<\x16\x17b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
