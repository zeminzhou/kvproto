// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mpp.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct TaskMeta {
    // message fields
    pub start_ts: u64,
    pub task_id: i64,
    pub partition_id: i64,
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaskMeta {
    fn default() -> &'a TaskMeta {
        <TaskMeta as ::protobuf::Message>::default_instance()
    }
}

impl TaskMeta {
    pub fn new() -> TaskMeta {
        ::std::default::Default::default()
    }

    // uint64 start_ts = 1;


    pub fn get_start_ts(&self) -> u64 {
        self.start_ts
    }
    pub fn clear_start_ts(&mut self) {
        self.start_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_ts(&mut self, v: u64) {
        self.start_ts = v;
    }

    // int64 task_id = 2;


    pub fn get_task_id(&self) -> i64 {
        self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: i64) {
        self.task_id = v;
    }

    // int64 partition_id = 3;


    pub fn get_partition_id(&self) -> i64 {
        self.partition_id
    }
    pub fn clear_partition_id(&mut self) {
        self.partition_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_partition_id(&mut self, v: i64) {
        self.partition_id = v;
    }

    // string address = 4;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TaskMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_ts = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.task_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.partition_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start_ts != 0 {
            my_size += ::protobuf::rt::value_size(1, self.start_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.partition_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.partition_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.start_ts != 0 {
            os.write_uint64(1, self.start_ts)?;
        }
        if self.task_id != 0 {
            os.write_int64(2, self.task_id)?;
        }
        if self.partition_id != 0 {
            os.write_int64(3, self.partition_id)?;
        }
        if !self.address.is_empty() {
            os.write_string(4, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaskMeta {
        TaskMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "start_ts",
                    |m: &TaskMeta| { &m.start_ts },
                    |m: &mut TaskMeta| { &mut m.start_ts },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "task_id",
                    |m: &TaskMeta| { &m.task_id },
                    |m: &mut TaskMeta| { &mut m.task_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "partition_id",
                    |m: &TaskMeta| { &m.partition_id },
                    |m: &mut TaskMeta| { &mut m.partition_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &TaskMeta| { &m.address },
                    |m: &mut TaskMeta| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaskMeta>(
                    "TaskMeta",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaskMeta {
        static mut instance: ::protobuf::lazy::Lazy<TaskMeta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaskMeta,
        };
        unsafe {
            instance.get(TaskMeta::new)
        }
    }
}

impl ::protobuf::Clear for TaskMeta {
    fn clear(&mut self) {
        self.start_ts = 0;
        self.task_id = 0;
        self.partition_id = 0;
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TaskMeta {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.start_ts, "start_ts", buf);
        ::protobuf::PbPrint::fmt(&self.task_id, "task_id", buf);
        ::protobuf::PbPrint::fmt(&self.partition_id, "partition_id", buf);
        ::protobuf::PbPrint::fmt(&self.address, "address", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TaskMeta {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.start_ts, "start_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.task_id, "task_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.partition_id, "partition_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.address, "address", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IsAliveRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IsAliveRequest {
    fn default() -> &'a IsAliveRequest {
        <IsAliveRequest as ::protobuf::Message>::default_instance()
    }
}

impl IsAliveRequest {
    pub fn new() -> IsAliveRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for IsAliveRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IsAliveRequest {
        IsAliveRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<IsAliveRequest>(
                    "IsAliveRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IsAliveRequest {
        static mut instance: ::protobuf::lazy::Lazy<IsAliveRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IsAliveRequest,
        };
        unsafe {
            instance.get(IsAliveRequest::new)
        }
    }
}

impl ::protobuf::Clear for IsAliveRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for IsAliveRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for IsAliveRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for IsAliveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IsAliveResponse {
    // message fields
    pub available: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IsAliveResponse {
    fn default() -> &'a IsAliveResponse {
        <IsAliveResponse as ::protobuf::Message>::default_instance()
    }
}

impl IsAliveResponse {
    pub fn new() -> IsAliveResponse {
        ::std::default::Default::default()
    }

    // bool available = 1;


    pub fn get_available(&self) -> bool {
        self.available
    }
    pub fn clear_available(&mut self) {
        self.available = false;
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: bool) {
        self.available = v;
    }
}

impl ::protobuf::Message for IsAliveResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.available = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.available != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.available != false {
            os.write_bool(1, self.available)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IsAliveResponse {
        IsAliveResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "available",
                    |m: &IsAliveResponse| { &m.available },
                    |m: &mut IsAliveResponse| { &mut m.available },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IsAliveResponse>(
                    "IsAliveResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IsAliveResponse {
        static mut instance: ::protobuf::lazy::Lazy<IsAliveResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IsAliveResponse,
        };
        unsafe {
            instance.get(IsAliveResponse::new)
        }
    }
}

impl ::protobuf::Clear for IsAliveResponse {
    fn clear(&mut self) {
        self.available = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for IsAliveResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.available, "available", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for IsAliveResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.available, "available", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for IsAliveResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DispatchTaskRequest {
    // message fields
    pub meta: ::protobuf::SingularPtrField<TaskMeta>,
    pub encoded_plan: ::std::vec::Vec<u8>,
    pub timeout: i64,
    pub regions: ::protobuf::RepeatedField<super::coprocessor::RegionInfo>,
    pub schema_ver: i64,
    pub table_regions: ::protobuf::RepeatedField<super::coprocessor::TableRegions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DispatchTaskRequest {
    fn default() -> &'a DispatchTaskRequest {
        <DispatchTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl DispatchTaskRequest {
    pub fn new() -> DispatchTaskRequest {
        ::std::default::Default::default()
    }

    // .mpp.TaskMeta meta = 1;


    pub fn get_meta(&self) -> &TaskMeta {
        self.meta.as_ref().unwrap_or_else(|| TaskMeta::default_instance())
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: TaskMeta) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut TaskMeta {
        if self.meta.is_none() {
            self.meta.set_default();
        }
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> TaskMeta {
        self.meta.take().unwrap_or_else(|| TaskMeta::new())
    }

    // bytes encoded_plan = 2;


    pub fn get_encoded_plan(&self) -> &[u8] {
        &self.encoded_plan
    }
    pub fn clear_encoded_plan(&mut self) {
        self.encoded_plan.clear();
    }

    // Param is passed by value, moved
    pub fn set_encoded_plan(&mut self, v: ::std::vec::Vec<u8>) {
        self.encoded_plan = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encoded_plan(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.encoded_plan
    }

    // Take field
    pub fn take_encoded_plan(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.encoded_plan, ::std::vec::Vec::new())
    }

    // int64 timeout = 3;


    pub fn get_timeout(&self) -> i64 {
        self.timeout
    }
    pub fn clear_timeout(&mut self) {
        self.timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: i64) {
        self.timeout = v;
    }

    // repeated .coprocessor.RegionInfo regions = 4;


    pub fn get_regions(&self) -> &[super::coprocessor::RegionInfo] {
        &self.regions
    }
    pub fn clear_regions(&mut self) {
        self.regions.clear();
    }

    // Param is passed by value, moved
    pub fn set_regions(&mut self, v: ::protobuf::RepeatedField<super::coprocessor::RegionInfo>) {
        self.regions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_regions(&mut self) -> &mut ::protobuf::RepeatedField<super::coprocessor::RegionInfo> {
        &mut self.regions
    }

    // Take field
    pub fn take_regions(&mut self) -> ::protobuf::RepeatedField<super::coprocessor::RegionInfo> {
        ::std::mem::replace(&mut self.regions, ::protobuf::RepeatedField::new())
    }

    // int64 schema_ver = 5;


    pub fn get_schema_ver(&self) -> i64 {
        self.schema_ver
    }
    pub fn clear_schema_ver(&mut self) {
        self.schema_ver = 0;
    }

    // Param is passed by value, moved
    pub fn set_schema_ver(&mut self, v: i64) {
        self.schema_ver = v;
    }

    // repeated .coprocessor.TableRegions table_regions = 6;


    pub fn get_table_regions(&self) -> &[super::coprocessor::TableRegions] {
        &self.table_regions
    }
    pub fn clear_table_regions(&mut self) {
        self.table_regions.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_regions(&mut self, v: ::protobuf::RepeatedField<super::coprocessor::TableRegions>) {
        self.table_regions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_table_regions(&mut self) -> &mut ::protobuf::RepeatedField<super::coprocessor::TableRegions> {
        &mut self.table_regions
    }

    // Take field
    pub fn take_table_regions(&mut self) -> ::protobuf::RepeatedField<super::coprocessor::TableRegions> {
        ::std::mem::replace(&mut self.table_regions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DispatchTaskRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.table_regions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.encoded_plan)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timeout = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.regions)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.schema_ver = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.table_regions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.encoded_plan.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.encoded_plan);
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.regions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.schema_ver != 0 {
            my_size += ::protobuf::rt::value_size(5, self.schema_ver, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.table_regions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.encoded_plan.is_empty() {
            os.write_bytes(2, &self.encoded_plan)?;
        }
        if self.timeout != 0 {
            os.write_int64(3, self.timeout)?;
        }
        for v in &self.regions {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.schema_ver != 0 {
            os.write_int64(5, self.schema_ver)?;
        }
        for v in &self.table_regions {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DispatchTaskRequest {
        DispatchTaskRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaskMeta>>(
                    "meta",
                    |m: &DispatchTaskRequest| { &m.meta },
                    |m: &mut DispatchTaskRequest| { &mut m.meta },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "encoded_plan",
                    |m: &DispatchTaskRequest| { &m.encoded_plan },
                    |m: &mut DispatchTaskRequest| { &mut m.encoded_plan },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timeout",
                    |m: &DispatchTaskRequest| { &m.timeout },
                    |m: &mut DispatchTaskRequest| { &mut m.timeout },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coprocessor::RegionInfo>>(
                    "regions",
                    |m: &DispatchTaskRequest| { &m.regions },
                    |m: &mut DispatchTaskRequest| { &mut m.regions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "schema_ver",
                    |m: &DispatchTaskRequest| { &m.schema_ver },
                    |m: &mut DispatchTaskRequest| { &mut m.schema_ver },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coprocessor::TableRegions>>(
                    "table_regions",
                    |m: &DispatchTaskRequest| { &m.table_regions },
                    |m: &mut DispatchTaskRequest| { &mut m.table_regions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DispatchTaskRequest>(
                    "DispatchTaskRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DispatchTaskRequest {
        static mut instance: ::protobuf::lazy::Lazy<DispatchTaskRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DispatchTaskRequest,
        };
        unsafe {
            instance.get(DispatchTaskRequest::new)
        }
    }
}

impl ::protobuf::Clear for DispatchTaskRequest {
    fn clear(&mut self) {
        self.meta.clear();
        self.encoded_plan.clear();
        self.timeout = 0;
        self.regions.clear();
        self.schema_ver = 0;
        self.table_regions.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DispatchTaskRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.meta, "meta", buf);
        ::protobuf::PbPrint::fmt(&self.encoded_plan, "encoded_plan", buf);
        ::protobuf::PbPrint::fmt(&self.timeout, "timeout", buf);
        ::protobuf::PbPrint::fmt(&self.regions, "regions", buf);
        ::protobuf::PbPrint::fmt(&self.schema_ver, "schema_ver", buf);
        ::protobuf::PbPrint::fmt(&self.table_regions, "table_regions", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DispatchTaskRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.meta, "meta", &mut s);
        ::protobuf::PbPrint::fmt(&self.encoded_plan, "encoded_plan", &mut s);
        ::protobuf::PbPrint::fmt(&self.timeout, "timeout", &mut s);
        ::protobuf::PbPrint::fmt(&self.regions, "regions", &mut s);
        ::protobuf::PbPrint::fmt(&self.schema_ver, "schema_ver", &mut s);
        ::protobuf::PbPrint::fmt(&self.table_regions, "table_regions", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DispatchTaskRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DispatchTaskResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub retry_regions: ::protobuf::RepeatedField<super::metapb::Region>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DispatchTaskResponse {
    fn default() -> &'a DispatchTaskResponse {
        <DispatchTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl DispatchTaskResponse {
    pub fn new() -> DispatchTaskResponse {
        ::std::default::Default::default()
    }

    // .mpp.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // repeated .metapb.Region retry_regions = 2;


    pub fn get_retry_regions(&self) -> &[super::metapb::Region] {
        &self.retry_regions
    }
    pub fn clear_retry_regions(&mut self) {
        self.retry_regions.clear();
    }

    // Param is passed by value, moved
    pub fn set_retry_regions(&mut self, v: ::protobuf::RepeatedField<super::metapb::Region>) {
        self.retry_regions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_retry_regions(&mut self) -> &mut ::protobuf::RepeatedField<super::metapb::Region> {
        &mut self.retry_regions
    }

    // Take field
    pub fn take_retry_regions(&mut self) -> ::protobuf::RepeatedField<super::metapb::Region> {
        ::std::mem::replace(&mut self.retry_regions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DispatchTaskResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.retry_regions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.retry_regions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.retry_regions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.retry_regions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DispatchTaskResponse {
        DispatchTaskResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Error>>(
                    "error",
                    |m: &DispatchTaskResponse| { &m.error },
                    |m: &mut DispatchTaskResponse| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metapb::Region>>(
                    "retry_regions",
                    |m: &DispatchTaskResponse| { &m.retry_regions },
                    |m: &mut DispatchTaskResponse| { &mut m.retry_regions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DispatchTaskResponse>(
                    "DispatchTaskResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DispatchTaskResponse {
        static mut instance: ::protobuf::lazy::Lazy<DispatchTaskResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DispatchTaskResponse,
        };
        unsafe {
            instance.get(DispatchTaskResponse::new)
        }
    }
}

impl ::protobuf::Clear for DispatchTaskResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.retry_regions.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DispatchTaskResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.retry_regions, "retry_regions", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DispatchTaskResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.retry_regions, "retry_regions", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DispatchTaskResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelTaskRequest {
    // message fields
    pub meta: ::protobuf::SingularPtrField<TaskMeta>,
    pub error: ::protobuf::SingularPtrField<Error>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelTaskRequest {
    fn default() -> &'a CancelTaskRequest {
        <CancelTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl CancelTaskRequest {
    pub fn new() -> CancelTaskRequest {
        ::std::default::Default::default()
    }

    // .mpp.TaskMeta meta = 1;


    pub fn get_meta(&self) -> &TaskMeta {
        self.meta.as_ref().unwrap_or_else(|| TaskMeta::default_instance())
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: TaskMeta) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut TaskMeta {
        if self.meta.is_none() {
            self.meta.set_default();
        }
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> TaskMeta {
        self.meta.take().unwrap_or_else(|| TaskMeta::new())
    }

    // .mpp.Error error = 2;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }
}

impl ::protobuf::Message for CancelTaskRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelTaskRequest {
        CancelTaskRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaskMeta>>(
                    "meta",
                    |m: &CancelTaskRequest| { &m.meta },
                    |m: &mut CancelTaskRequest| { &mut m.meta },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Error>>(
                    "error",
                    |m: &CancelTaskRequest| { &m.error },
                    |m: &mut CancelTaskRequest| { &mut m.error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CancelTaskRequest>(
                    "CancelTaskRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelTaskRequest {
        static mut instance: ::protobuf::lazy::Lazy<CancelTaskRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelTaskRequest,
        };
        unsafe {
            instance.get(CancelTaskRequest::new)
        }
    }
}

impl ::protobuf::Clear for CancelTaskRequest {
    fn clear(&mut self) {
        self.meta.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for CancelTaskRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.meta, "meta", buf);
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CancelTaskRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.meta, "meta", &mut s);
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelTaskRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelTaskResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelTaskResponse {
    fn default() -> &'a CancelTaskResponse {
        <CancelTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl CancelTaskResponse {
    pub fn new() -> CancelTaskResponse {
        ::std::default::Default::default()
    }

    // .mpp.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }
}

impl ::protobuf::Message for CancelTaskResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelTaskResponse {
        CancelTaskResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Error>>(
                    "error",
                    |m: &CancelTaskResponse| { &m.error },
                    |m: &mut CancelTaskResponse| { &mut m.error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CancelTaskResponse>(
                    "CancelTaskResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelTaskResponse {
        static mut instance: ::protobuf::lazy::Lazy<CancelTaskResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelTaskResponse,
        };
        unsafe {
            instance.get(CancelTaskResponse::new)
        }
    }
}

impl ::protobuf::Clear for CancelTaskResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for CancelTaskResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CancelTaskResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelTaskResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EstablishMppConnectionRequest {
    // message fields
    pub sender_meta: ::protobuf::SingularPtrField<TaskMeta>,
    pub receiver_meta: ::protobuf::SingularPtrField<TaskMeta>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EstablishMppConnectionRequest {
    fn default() -> &'a EstablishMppConnectionRequest {
        <EstablishMppConnectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl EstablishMppConnectionRequest {
    pub fn new() -> EstablishMppConnectionRequest {
        ::std::default::Default::default()
    }

    // .mpp.TaskMeta sender_meta = 1;


    pub fn get_sender_meta(&self) -> &TaskMeta {
        self.sender_meta.as_ref().unwrap_or_else(|| TaskMeta::default_instance())
    }
    pub fn clear_sender_meta(&mut self) {
        self.sender_meta.clear();
    }

    pub fn has_sender_meta(&self) -> bool {
        self.sender_meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_meta(&mut self, v: TaskMeta) {
        self.sender_meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_meta(&mut self) -> &mut TaskMeta {
        if self.sender_meta.is_none() {
            self.sender_meta.set_default();
        }
        self.sender_meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_meta(&mut self) -> TaskMeta {
        self.sender_meta.take().unwrap_or_else(|| TaskMeta::new())
    }

    // .mpp.TaskMeta receiver_meta = 2;


    pub fn get_receiver_meta(&self) -> &TaskMeta {
        self.receiver_meta.as_ref().unwrap_or_else(|| TaskMeta::default_instance())
    }
    pub fn clear_receiver_meta(&mut self) {
        self.receiver_meta.clear();
    }

    pub fn has_receiver_meta(&self) -> bool {
        self.receiver_meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receiver_meta(&mut self, v: TaskMeta) {
        self.receiver_meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver_meta(&mut self) -> &mut TaskMeta {
        if self.receiver_meta.is_none() {
            self.receiver_meta.set_default();
        }
        self.receiver_meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_receiver_meta(&mut self) -> TaskMeta {
        self.receiver_meta.take().unwrap_or_else(|| TaskMeta::new())
    }
}

impl ::protobuf::Message for EstablishMppConnectionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.sender_meta {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receiver_meta {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sender_meta)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.receiver_meta)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sender_meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.receiver_meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sender_meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.receiver_meta.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EstablishMppConnectionRequest {
        EstablishMppConnectionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaskMeta>>(
                    "sender_meta",
                    |m: &EstablishMppConnectionRequest| { &m.sender_meta },
                    |m: &mut EstablishMppConnectionRequest| { &mut m.sender_meta },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaskMeta>>(
                    "receiver_meta",
                    |m: &EstablishMppConnectionRequest| { &m.receiver_meta },
                    |m: &mut EstablishMppConnectionRequest| { &mut m.receiver_meta },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EstablishMppConnectionRequest>(
                    "EstablishMppConnectionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EstablishMppConnectionRequest {
        static mut instance: ::protobuf::lazy::Lazy<EstablishMppConnectionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EstablishMppConnectionRequest,
        };
        unsafe {
            instance.get(EstablishMppConnectionRequest::new)
        }
    }
}

impl ::protobuf::Clear for EstablishMppConnectionRequest {
    fn clear(&mut self) {
        self.sender_meta.clear();
        self.receiver_meta.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for EstablishMppConnectionRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.sender_meta, "sender_meta", buf);
        ::protobuf::PbPrint::fmt(&self.receiver_meta, "receiver_meta", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for EstablishMppConnectionRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.sender_meta, "sender_meta", &mut s);
        ::protobuf::PbPrint::fmt(&self.receiver_meta, "receiver_meta", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for EstablishMppConnectionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MppDataPacket {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub error: ::protobuf::SingularPtrField<Error>,
    pub chunks: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub stream_ids: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MppDataPacket {
    fn default() -> &'a MppDataPacket {
        <MppDataPacket as ::protobuf::Message>::default_instance()
    }
}

impl MppDataPacket {
    pub fn new() -> MppDataPacket {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // .mpp.Error error = 2;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // repeated bytes chunks = 3;


    pub fn get_chunks(&self) -> &[::std::vec::Vec<u8>] {
        &self.chunks
    }
    pub fn clear_chunks(&mut self) {
        self.chunks.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunks(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.chunks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunks(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.chunks
    }

    // Take field
    pub fn take_chunks(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.chunks, ::protobuf::RepeatedField::new())
    }

    // repeated uint64 stream_ids = 4;


    pub fn get_stream_ids(&self) -> &[u64] {
        &self.stream_ids
    }
    pub fn clear_stream_ids(&mut self) {
        self.stream_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_stream_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.stream_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stream_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.stream_ids
    }

    // Take field
    pub fn take_stream_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.stream_ids, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MppDataPacket {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.chunks)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.stream_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.chunks {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        for value in &self.stream_ids {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.chunks {
            os.write_bytes(3, &v)?;
        };
        for v in &self.stream_ids {
            os.write_uint64(4, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MppDataPacket {
        MppDataPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &MppDataPacket| { &m.data },
                    |m: &mut MppDataPacket| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Error>>(
                    "error",
                    |m: &MppDataPacket| { &m.error },
                    |m: &mut MppDataPacket| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "chunks",
                    |m: &MppDataPacket| { &m.chunks },
                    |m: &mut MppDataPacket| { &mut m.chunks },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "stream_ids",
                    |m: &MppDataPacket| { &m.stream_ids },
                    |m: &mut MppDataPacket| { &mut m.stream_ids },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MppDataPacket>(
                    "MppDataPacket",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MppDataPacket {
        static mut instance: ::protobuf::lazy::Lazy<MppDataPacket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MppDataPacket,
        };
        unsafe {
            instance.get(MppDataPacket::new)
        }
    }
}

impl ::protobuf::Clear for MppDataPacket {
    fn clear(&mut self) {
        self.data.clear();
        self.error.clear();
        self.chunks.clear();
        self.stream_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for MppDataPacket {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.data, "data", buf);
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.chunks, "chunks", buf);
        ::protobuf::PbPrint::fmt(&self.stream_ids, "stream_ids", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for MppDataPacket {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.data, "data", &mut s);
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.chunks, "chunks", &mut s);
        ::protobuf::PbPrint::fmt(&self.stream_ids, "stream_ids", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for MppDataPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Error {
    // message fields
    pub code: i32,
    pub msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }

    // string msg = 2;


    pub fn get_msg(&self) -> &str {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.msg.is_empty() {
            os.write_string(2, &self.msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "code",
                    |m: &Error| { &m.code },
                    |m: &mut Error| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "msg",
                    |m: &Error| { &m.msg },
                    |m: &mut Error| { &mut m.msg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Error>(
                    "Error",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Error {
        static mut instance: ::protobuf::lazy::Lazy<Error> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Error,
        };
        unsafe {
            instance.get(Error::new)
        }
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.code = 0;
        self.msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Error {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.code, "code", buf);
        ::protobuf::PbPrint::fmt(&self.msg, "msg", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Error {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.code, "code", &mut s);
        ::protobuf::PbPrint::fmt(&self.msg, "msg", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tmpp.proto\x12\x03mpp\x1a\x14gogoproto/gogo.proto\x1a\x11coprocessor.\
    proto\x1a\x0cmetapb.proto\"{\n\x08TaskMeta\x12\x19\n\x08start_ts\x18\x01\
    \x20\x01(\x04R\x07startTs\x12\x17\n\x07task_id\x18\x02\x20\x01(\x03R\x06\
    taskId\x12!\n\x0cpartition_id\x18\x03\x20\x01(\x03R\x0bpartitionId\x12\
    \x18\n\x07address\x18\x04\x20\x01(\tR\x07address\"\x10\n\x0eIsAliveReque\
    st\"/\n\x0fIsAliveResponse\x12\x1c\n\tavailable\x18\x01\x20\x01(\x08R\ta\
    vailable\"\x87\x02\n\x13DispatchTaskRequest\x12!\n\x04meta\x18\x01\x20\
    \x01(\x0b2\r.mpp.TaskMetaR\x04meta\x12!\n\x0cencoded_plan\x18\x02\x20\
    \x01(\x0cR\x0bencodedPlan\x12\x18\n\x07timeout\x18\x03\x20\x01(\x03R\x07\
    timeout\x121\n\x07regions\x18\x04\x20\x03(\x0b2\x17.coprocessor.RegionIn\
    foR\x07regions\x12\x1d\n\nschema_ver\x18\x05\x20\x01(\x03R\tschemaVer\
    \x12>\n\rtable_regions\x18\x06\x20\x03(\x0b2\x19.coprocessor.TableRegion\
    sR\x0ctableRegions\"m\n\x14DispatchTaskResponse\x12\x20\n\x05error\x18\
    \x01\x20\x01(\x0b2\n.mpp.ErrorR\x05error\x123\n\rretry_regions\x18\x02\
    \x20\x03(\x0b2\x0e.metapb.RegionR\x0cretryRegions\"X\n\x11CancelTaskRequ\
    est\x12!\n\x04meta\x18\x01\x20\x01(\x0b2\r.mpp.TaskMetaR\x04meta\x12\x20\
    \n\x05error\x18\x02\x20\x01(\x0b2\n.mpp.ErrorR\x05error\"6\n\x12CancelTa\
    skResponse\x12\x20\n\x05error\x18\x01\x20\x01(\x0b2\n.mpp.ErrorR\x05erro\
    r\"\x83\x01\n\x1dEstablishMPPConnectionRequest\x12.\n\x0bsender_meta\x18\
    \x01\x20\x01(\x0b2\r.mpp.TaskMetaR\nsenderMeta\x122\n\rreceiver_meta\x18\
    \x02\x20\x01(\x0b2\r.mpp.TaskMetaR\x0creceiverMeta\"|\n\rMPPDataPacket\
    \x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\x12\x20\n\x05error\x18\
    \x02\x20\x01(\x0b2\n.mpp.ErrorR\x05error\x12\x16\n\x06chunks\x18\x03\x20\
    \x03(\x0cR\x06chunks\x12\x1d\n\nstream_ids\x18\x04\x20\x03(\x04R\tstream\
    Ids\"-\n\x05Error\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\
    \x10\n\x03msg\x18\x02\x20\x01(\tR\x03msgB\x1e\n\x10org.tikv.kvproto\xc8\
    \xe2\x1e\x01\xe0\xe2\x1e\x01\xd0\xe2\x1e\x01J\xaa\x15\n\x06\x12\x04\0\0J\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x0c\n\
    \t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\0\x1b\n\t\
    \n\x02\x03\x02\x12\x03\x05\0\x16\n\x08\n\x01\x08\x12\x03\x07\0(\n\x0b\n\
    \x04\x08\xa9\xec\x03\x12\x03\x07\0(\n\x08\n\x01\x08\x12\x03\x08\0$\n\x0b\
    \n\x04\x08\xac\xec\x03\x12\x03\x08\0$\n\x08\n\x01\x08\x12\x03\t\0*\n\x0b\
    \n\x04\x08\xaa\xec\x03\x12\x03\t\0*\n\x08\n\x01\x08\x12\x03\x0b\0)\n\t\n\
    \x02\x08\x01\x12\x03\x0b\0)\nZ\n\x02\x04\0\x12\x04\x0e\0\x13\x01\x1aN\
    \x20TaskMeta\x20contains\x20meta\x20of\x20a\x20mpp\x20plan,\x20including\
    \x20query's\x20ts\x20and\x20task\x20address.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0e\x08\x10\n\"\n\x04\x04\0\x02\0\x12\x03\x0f\x08\x1c\"\x15\x20star\
    t\x20ts\x20of\x20a\x20query\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\
    \x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x0f\x17\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x0f\x1a\x1b\n;\n\x04\x04\0\x02\x01\x12\x03\x10\x08\
    \x1a\".\x20if\x20task\x20id\x20is\x20-1\x20,\x20it\x20indicates\x20a\x20\
    tidb\x20task.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x10\x08\r\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x10\x0e\x15\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x10\x18\x19\n+\n\x04\x04\0\x02\x02\x12\x03\x11\x08\x1f\"\x1e\
    \x20Only\x20used\x20for\x20hash\x20partition\n\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x11\x08\r\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x11\x0e\x1a\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x11\x1d\x1e\n+\n\x04\x04\0\x02\
    \x03\x12\x03\x12\x08\x1b\"\x1e\x20target\x20address\x20of\x20this\x20tas\
    k.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x12\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x12\x0f\x16\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x12\x19\x1a\n\n\n\x02\x04\x01\x12\x04\x15\0\x16\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x15\x08\x16\n\n\n\x02\x04\x02\x12\x04\x18\0\x1a\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x18\x08\x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x19\x04\x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x19\x04\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x19\t\x12\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x19\x15\x16\nE\n\x02\x04\x03\x12\x04\x1d\0&\x01\x1a9\x20Dipsatc\
    h\x20the\x20task\x20request\x20to\x20different\x20tiflash\x20servers.\n\
    \n\n\n\x03\x04\x03\x01\x12\x03\x1d\x08\x1b\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\x1e\x08\x1a\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1e\x08\x10\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03\x1e\x11\x15\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x1e\x18\x19\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1f\x08\x1f\
    \n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1f\x08\r\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03\x1f\x0e\x1a\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\
    \x1f\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x20\x08\x1a\n\x0c\n\x05\
    \x04\x03\x02\x02\x05\x12\x03\x20\x08\r\n\x0c\n\x05\x04\x03\x02\x02\x01\
    \x12\x03\x20\x0e\x15\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x20\x18\x19\
    \n\x0b\n\x04\x04\x03\x02\x03\x12\x03!\x040\n\x0c\n\x05\x04\x03\x02\x03\
    \x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03!\r#\n\x0c\
    \n\x05\x04\x03\x02\x03\x01\x12\x03!$+\n\x0c\n\x05\x04\x03\x02\x03\x03\
    \x12\x03!./\nQ\n\x04\x04\x03\x02\x04\x12\x03#\x08\x1d\x1aD\x20If\x20this\
    \x20task\x20contains\x20table\x20scan,\x20we\x20still\x20need\x20their\
    \x20region\x20info.\n\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03#\x08\r\n\
    \x0c\n\x05\x04\x03\x02\x04\x01\x12\x03#\x0e\x18\n\x0c\n\x05\x04\x03\x02\
    \x04\x03\x12\x03#\x1b\x1c\n,\n\x04\x04\x03\x02\x05\x12\x03%\x08<\x1a\x1f\
    \x20Used\x20for\x20partition\x20table\x20scan\n\n\x0c\n\x05\x04\x03\x02\
    \x05\x04\x12\x03%\x08\x10\n\x0c\n\x05\x04\x03\x02\x05\x06\x12\x03%\x11)\
    \n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03%*7\n\x0c\n\x05\x04\x03\x02\x05\
    \x03\x12\x03%:;\n2\n\x02\x04\x04\x12\x04)\0,\x01\x1a&\x20Get\x20response\
    \x20of\x20DispatchTaskRequest.\n\n\n\n\x03\x04\x04\x01\x12\x03)\x08\x1c\
    \n\x0b\n\x04\x04\x04\x02\0\x12\x03*\x08\x18\n\x0c\n\x05\x04\x04\x02\0\
    \x06\x12\x03*\x08\r\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03*\x0e\x13\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03*\x16\x17\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03+\x081\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03+\x08\x10\n\x0c\n\
    \x05\x04\x04\x02\x01\x06\x12\x03+\x11\x1e\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03+\x1f,\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03+/0\n?\n\x02\
    \x04\x05\x12\x04/\02\x01\x1a3\x20CancelTaskRequest\x20closes\x20the\x20e\
    xecution\x20of\x20a\x20task.\n\n\n\n\x03\x04\x05\x01\x12\x03/\x08\x19\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x030\x08\x1a\n\x0c\n\x05\x04\x05\x02\0\x06\
    \x12\x030\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x030\x11\x15\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x030\x18\x19\n\x0b\n\x04\x04\x05\x02\x01\x12\
    \x031\x08\x18\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x031\x08\r\n\x0c\n\x05\
    \x04\x05\x02\x01\x01\x12\x031\x0e\x13\n\x0c\n\x05\x04\x05\x02\x01\x03\
    \x12\x031\x16\x17\n\n\n\x02\x04\x06\x12\x044\06\x01\n\n\n\x03\x04\x06\
    \x01\x12\x034\x08\x1a\n\x0b\n\x04\x04\x06\x02\0\x12\x035\x08\x18\n\x0c\n\
    \x05\x04\x06\x02\0\x06\x12\x035\x08\r\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x035\x0e\x13\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x035\x16\x17\nv\n\x02\
    \x04\x07\x12\x049\0<\x01\x1aj\x20build\x20connection\x20between\x20diffe\
    rent\x20tasks.\x20Data\x20is\x20sent\x20by\x20the\x20tasks\x20that\x20ar\
    e\x20closer\x20to\x20the\x20data\x20sources.\n\n\n\n\x03\x04\x07\x01\x12\
    \x039\x08%\n(\n\x04\x04\x07\x02\0\x12\x03:\x04\x1d\"\x1b\x20node\x20clos\
    er\x20to\x20the\x20source\n\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03:\x04\
    \x0c\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03:\r\x18\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03:\x1b\x1c\n2\n\x04\x04\x07\x02\x01\x12\x03;\x08#\"%\
    \x20node\x20closer\x20to\x20the\x20tidb\x20mpp\x20gather.\n\n\x0c\n\x05\
    \x04\x07\x02\x01\x06\x12\x03;\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x01\
    \x12\x03;\x11\x1e\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03;!\"\n\xb8\x02\
    \n\x02\x04\x08\x12\x04@\0E\x01\x1a\xab\x02\x20when\x20TiFlash\x20sends\
    \x20data\x20to\x20TiDB,\x20Data\x20packets\x20wrap\x20tipb.SelectRespons\
    e,\x20i.e.,\x20serialize\x20tipb.SelectResponse\x20into\x20data;\n\x20wh\
    en\x20TiFlash\x20sends\x20data\x20to\x20TiFlash,\x20data\x20blocks\x20ar\
    e\x20serialized\x20into\x20chunks,\x20and\x20the\x20execution_summaries\
    \x20in\x20tipb.SelectResponse\x20are\x20serialized\x20into\x20data\x20on\
    ly\x20for\x20the\x20last\x20packet.\n\n\n\n\x03\x04\x08\x01\x12\x03@\x08\
    \x15\n\x0b\n\x04\x04\x08\x02\0\x12\x03A\x04\x13\n\x0c\n\x05\x04\x08\x02\
    \0\x05\x12\x03A\x04\t\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03A\n\x0e\n\x0c\
    \n\x05\x04\x08\x02\0\x03\x12\x03A\x11\x12\n\x0b\n\x04\x04\x08\x02\x01\
    \x12\x03B\x08\x18\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03B\x08\r\n\x0c\n\
    \x05\x04\x08\x02\x01\x01\x12\x03B\x0e\x13\n\x0c\n\x05\x04\x08\x02\x01\
    \x03\x12\x03B\x16\x17\n\x0b\n\x04\x04\x08\x02\x02\x12\x03C\x08\"\n\x0c\n\
    \x05\x04\x08\x02\x02\x04\x12\x03C\x08\x10\n\x0c\n\x05\x04\x08\x02\x02\
    \x05\x12\x03C\x11\x16\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03C\x17\x1d\n\
    \x0c\n\x05\x04\x08\x02\x02\x03\x12\x03C\x20!\n\x0b\n\x04\x04\x08\x02\x03\
    \x12\x03D\x08'\n\x0c\n\x05\x04\x08\x02\x03\x04\x12\x03D\x08\x10\n\x0c\n\
    \x05\x04\x08\x02\x03\x05\x12\x03D\x11\x17\n\x0c\n\x05\x04\x08\x02\x03\
    \x01\x12\x03D\x18\"\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03D%&\n\n\n\x02\
    \x04\t\x12\x04G\0J\x01\n\n\n\x03\x04\t\x01\x12\x03G\x08\r\n\x0b\n\x04\
    \x04\t\x02\0\x12\x03H\x08\x17\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03H\x08\r\
    \n\x0c\n\x05\x04\t\x02\0\x01\x12\x03H\x0e\x12\n\x0c\n\x05\x04\t\x02\0\
    \x03\x12\x03H\x15\x16\n\x0b\n\x04\x04\t\x02\x01\x12\x03I\x08\x17\n\x0c\n\
    \x05\x04\t\x02\x01\x05\x12\x03I\x08\x0e\n\x0c\n\x05\x04\t\x02\x01\x01\
    \x12\x03I\x0f\x12\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03I\x15\x16b\x06pro\
    to3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
